{"version":3,"file":"static/js/4498.721e8d31.chunk.js","mappings":"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","sources":["components/Loader.tsx","components/form/VerticalForm.tsx","components/form/FormInput.tsx","links.ts","pages/auth/AuthLayout.tsx","service/login.ts","service/verify.ts","pages/auth/Login.tsx","redux/token/actions.ts"],"sourcesContent":["const Loader = () => {\n    return (\n        <div className=\"preloader\" id=\"preloader\">\n            <div className=\"status\" id=\"status\">\n                <div className=\"spinner\">\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Loader;\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial, FieldValues } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues extends FieldValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","export class Constants {\r\n    private static readonly link = \" http://45.155.124.180:5050/\"\r\n    public static readonly API = this.link+\"api\";\r\n    public static readonly login = this.link+\"auth/login\";\r\n    public static readonly register = this.link+\"auth/register\";\r\n    public static readonly verify = this.link+\"auth/verify\"\r\n\r\n}\r\n","import { useEffect } from 'react';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\n// images\nimport LogoDark from '../../assets/images/logo-dark.png';\nimport LogoLight from '../../assets/images/logo-light.png';\n\ntype AccountLayoutProps = {\n    hasLogo?: boolean;\n    bottomLinks?: any;\n    children?: React.ReactNode;\n};\n\nconst AuthLayout = ({ hasLogo, bottomLinks, children }: AccountLayoutProps) => {\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if (document.body) {\n            document.body.classList.add('authentication-bg');\n        }\n        return () => {\n            if (document.body) {\n                document.body.classList.remove('authentication-bg');\n            }\n        };\n    }, []);\n\n    return (\n        <div className=\"account-pages my-5\">\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <Col md={8} lg={6} xl={4}>\n                        {hasLogo && (\n                            <div className=\"text-center\">\n                                <div className=\"auth-logo\">\n                                    <Link to=\"/\" className=\"logo logo-dark text-center\">\n                                        <span className=\"logo-lg\">\n                                            <img src={LogoDark} alt=\"\" height=\"22\" />\n                                        </span>\n                                    </Link>\n\n                                    <Link to=\"/\" className=\"logo logo-light text-center\">\n                                        <span className=\"logo-lg\">\n                                            <img src={LogoLight} alt=\"\" height=\"22\" />\n                                        </span>\n                                    </Link>\n                                </div>\n                                <p className=\"text-muted mt-2 mb-4\">{t('Responsive Admin Dashboard')}</p>\n                            </div>\n                        )}\n                        <Card>\n                            <Card.Body className=\"p-4\">{children}</Card.Body>\n                        </Card>\n\n                        {/* bottom links */}\n                        {bottomLinks}\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nAuthLayout.defaultProps = {\n    hasLogo: true,\n};\n\nexport default AuthLayout;\n","import axios from 'axios';\r\nimport { Constants } from '../links';\r\nimport { getToken } from '../redux/token/actions';\r\n\r\n\r\n\r\nexport type Response = {\r\n    success: boolean;\r\n  } & (SuccessfullResponse | FailedResponse)\r\n\r\n  export type SuccessfullResponse = {\r\n    success: true;\r\n    data: {\r\n        access_token: string\r\n    };\r\n  }\r\n\r\n  export type FailedResponse = {\r\n    success: false;\r\n    error: string;\r\n  }\r\n\r\nexport const login = async (email:string, password:string) => {\r\n    var myHeaders = new Headers();\r\nmyHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\nvar raw = JSON.stringify({\r\n  \"email\": email,\r\n  \"password\": password\r\n});\r\n\r\nvar requestOptions = {\r\n  method: 'POST',\r\n  headers: myHeaders,\r\n  body: raw,\r\n  redirect: 'follow'\r\n};\r\n\r\nlet response = await fetch(Constants.login, {\r\n  method: requestOptions.method,\r\n  headers: requestOptions.headers,\r\n  body: requestOptions.body,\r\n  redirect: \"follow\"\r\n})\r\nlet data = await response.json() as Response\r\nconsole.log(data)\r\nif (data.success) {\r\n  return data.data.access_token\r\n} else {\r\nthrow new Error(data.error)\r\n}\r\n}\r\n","import { Constants } from '../links';\r\n\r\nexport type Response = {\r\n    success: boolean;\r\n  } & (SuccessfullResponse | FailedResponse)\r\n\r\n  export type SuccessfullResponse = {\r\n    success: true;\r\n    data: boolean;\r\n  }\r\n\r\n  export type FailedResponse = {\r\n    success: false;\r\n    error: string;\r\n  }\r\n\r\nexport const verifyToken = async (token:string) => {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\nvar raw = JSON.stringify({\r\n  \"token\": \"Bearer \" + token\r\n});\r\n\r\nvar requestOptions = {\r\n  method: 'POST',\r\n  headers: myHeaders,\r\n  body: raw,\r\n  redirect: 'follow'\r\n};\r\n\r\nlet response = await fetch(Constants.verify, {\r\n  method: requestOptions.method,\r\n  headers: requestOptions.headers,\r\n  body: requestOptions.body,\r\n  redirect: \"follow\"\r\n})\r\nlet data = await response.json() as Response\r\nconsole.log(data)\r\nif (data.success) {\r\n  return data.data\r\n} else {\r\nthrow new Error(data.error)\r\n}\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { Button, Alert, Row, Col, Nav } from 'react-bootstrap';\r\nimport { Navigate, Link, useLocation, useNavigate } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useTranslation } from 'react-i18next';\r\nimport axios from 'axios';\r\n\r\n// hooks\r\nimport { useRedux } from '../../hooks/';\r\n\r\n// actions\r\nimport { loginUser } from '../../redux/actions';\r\n\r\n// components\r\nimport { VerticalForm, FormInput } from '../../components/form/';\r\n\r\nimport { login } from '../../service/login';\r\nimport Loader from '../../components/Loader';\r\n\r\nimport AuthLayout from './AuthLayout';\r\nimport { getToken } from '../../redux/token/actions';\r\nimport React from 'react';\r\nimport { verifyToken } from '../../service/verify';\r\n\r\ntype LocationState = {\r\n    from?: Location;\r\n};\r\n\r\ntype UserData = {\r\n    email: string;\r\n    password: string;\r\n};\r\n\r\n/* bottom links */\r\nconst BottomLink = () => {\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Row className=\"mt-3\">\r\n            <Col xs={12} className=\"text-center\">\r\n                <p className=\"text-muted\">\r\n                    <Link to=\"/auth/forget-password\" className=\"text-muted ms-1\">\r\n                        <i className=\"fa fa-lock me-1\"></i>\r\n                        {t('Forgot your password?')}\r\n                    </Link>\r\n                </p>\r\n                <p className=\"text-muted\">\r\n                    {t(\"Don't have an account?\")}{' '}\r\n                    <Link to={'/auth/register'} className=\"text-dark ms-1\">\r\n                        <b>{t('Sign Up')}</b>\r\n                    </Link>\r\n                </p>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nconst Login = () => {\r\n    const { t } = useTranslation();\r\n    const { dispatch, appSelector } = useRedux();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    let redirectUrl = '/';\r\n\r\n    const [user, setUser] = useState<string>('');\r\n    const [userLoggedIn, setUserLoggedIn] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [email, setEmail] = useState<UserData['email']>(''); // Define email state\r\n    const [password, setPassword] = useState<UserData['password']>('');\r\n\r\n    const tok = appSelector((state) => state);\r\n\r\n    useEffect(() => {\r\n        if (userLoggedIn) {\r\n            navigate('/dashboard'); // Kullanıcıyı dashboard sayfasına yönlendir\r\n        }\r\n    }, [userLoggedIn, navigate]);\r\n\r\n    /*\r\n    form validation schema\r\n  */\r\n    const schemaResolver = yupResolver(\r\n        yup.object().shape({\r\n            email: yup.string().required(t('Please enter Email')).email(t('Please enter valid Email')),\r\n            password: yup.string().required(t('Please enter Password')),\r\n        })\r\n    );\r\n\r\n    /*\r\n    handle form submission\r\n  */\r\n    const onSubmit = (formData: UserData) => {\r\n        setLoading(true);\r\n        setError('');\r\n        setPassword(formData['password']);\r\n        setEmail(formData['email']);\r\n        handleLogin(formData['email'], formData['password']);\r\n    };\r\n\r\n    const handleLogin = async (email: string, password: string) => {\r\n        try {\r\n            let token = await login(email, password);\r\n            localStorage.setItem('token', token);\r\n            dispatch(getToken('token', token));\r\n            dispatch(loginUser(email, password)); // Dispatch the loginUser action with email and password\r\n            let verifiedToken = await verifyToken(token);\r\n            console.log(verifiedToken);\r\n\r\n            console.log(token);\r\n            setLoading(true);\r\n            setUserLoggedIn(true);\r\n            setUser(token);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError('Invalid Credentials');\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <AuthLayout bottomLinks={<BottomLink />}>\r\n                <div className=\"text-center mb-4\">\r\n                    <h4 className=\"text-uppercase mt-0\">{t('Sign In')}</h4>\r\n                </div>\r\n\r\n                {error && (\r\n                    <Alert variant=\"danger\" className=\"my-2\">\r\n                        {error}\r\n                    </Alert>\r\n                )}\r\n                {loading && <Loader />}\r\n\r\n                <VerticalForm<UserData>\r\n                    onSubmit={onSubmit}\r\n                    resolver={schemaResolver}\r\n                    defaultValues={{ email: 'adminto@coderthemes.com', password: 'test' }}>\r\n                    <FormInput\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        label={t('Email address')}\r\n                        placeholder={t('hello@coderthemes.com')}\r\n                        containerClass={'mb-3'}\r\n                    />\r\n                    <FormInput\r\n                        label={t('Password')}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\"Enter your password\"\r\n                        containerClass={'mb-3'}\r\n                    />\r\n\r\n                    <FormInput\r\n                        type=\"checkbox\"\r\n                        name=\"checkbox\"\r\n                        label={t('Remember me')}\r\n                        containerClass={'mb-3'}\r\n                        defaultChecked\r\n                    />\r\n\r\n                    <div className=\"text-center d-grid mb-3\">\r\n                        <Button variant=\"primary\" type=\"submit\" disabled={loading}>\r\n                            {t('Log In')}\r\n                        </Button>\r\n                    </div>\r\n                </VerticalForm>\r\n            </AuthLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","\r\nimport { TokenActionTypes } from \"./constants\";\r\n\r\nexport type TokenActionType = {\r\n    type:\r\n    | TokenActionTypes.TOKEN_SUCCESS\r\n    | TokenActionTypes.LOGOUT_USER;\r\n    payload: any;\r\n};\r\n\r\ntype TokenData = {\r\n    token: string;\r\n};\r\n\r\nexport const getToken = (actionType:string,data: any): TokenActionType => ({\r\n    type: TokenActionTypes.TOKEN_SUCCESS,\r\n    payload: {actionType,data},\r\n});\r\n\r\nexport const logoutUser = (): TokenActionType => ({\r\n    type: TokenActionTypes.LOGOUT_USER,\r\n    payload: {},\r\n});\r\n\r\n\r\n"],"names":["className","id","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","otherProps","useState","showPassword","setShowPassword","InputGroup","Form","as","ref","r","isInvalid","autoComplete","classNames","onClick","TextualInput","endIcon","comp","rows","CheckInput","label","SelectInput","labelClassName","containerClass","action","hasEndIcon","undefined","Constants","link","API","login","verify","AuthLayout","hasLogo","bottomLinks","t","useTranslation","useEffect","document","body","classList","add","remove","md","lg","xl","to","src","LogoDark","alt","height","LogoLight","defaultProps","email","password","myHeaders","Headers","append","raw","JSON","stringify","requestOptions","method","headers","redirect","fetch","response","json","data","console","log","success","access_token","Error","error","verifyToken","token","BottomLink","Row","Col","xs","useRedux","dispatch","appSelector","navigate","useLocation","useNavigate","setUser","userLoggedIn","setUserLoggedIn","loading","setLoading","setError","setEmail","setPassword","state","schemaResolver","yupResolver","yup","shape","required","handleLogin","localStorage","setItem","getToken","loginUser","verifiedToken","Alert","variant","Loader","formData","defaultChecked","Button","disabled","actionType","TokenActionTypes","payload","logoutUser"],"sourceRoot":""}