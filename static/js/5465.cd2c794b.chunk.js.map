{"version":3,"file":"static/js/5465.cd2c794b.chunk.js","mappings":"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","sources":["components/ContactDetails.tsx","redux/musteriler/actions.ts","components/form/VerticalForm.tsx","components/form/FormInput.tsx","links.ts","service/musteri.ts"],"sourcesContent":["import { Button, Card, Col, Dropdown, Form, Modal, Row } from 'react-bootstrap';\r\nimport { VerticalForm, FormInput } from '../components/form';\r\n// types\r\nimport { Contact } from '../pages/apps/Contacts/List/types';\r\nimport { Link } from 'react-router-dom';\r\nimport { BaseSyntheticEvent, SetStateAction, useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { musteriSec } from '../myRedux/Musteriler/slice';\r\nimport { selectedMusteri } from '../redux/musteriler/actions';\r\nimport { useRedux } from '../hooks';\r\nimport { getCustomers, CustomerData, deleteCustomer, updateCustomer } from '../service/musteri';\r\n\r\ntype ContactDetailsProps = {\r\n    contact: Contact;\r\n    customers: CustomerData[];\r\n    setCustomers: React.Dispatch<React.SetStateAction<CustomerData[]>>;\r\n};\r\n//aS\r\n\r\nconst ContactDetails = ({ contact, customers, setCustomers }: ContactDetailsProps) => {\r\n    const [selectedCustomer, setSelectedCustomer] = useState<CustomerData | null>(null);\r\n    const { dispatch, appSelector } = useRedux();\r\n    const [showEditModal, setShowEditModal] = useState(false);\r\n    const [updatedCustomerData, setUpdatedCustomerData] = useState<CustomerData | null>(null);\r\n    const [avatar, setAvatar] = useState<File | null>(null);\r\n    const [triggerGetCustomers, setTriggerGetCustomers] = useState(false);\r\n\r\n    const token = localStorage.getItem('token') || '';\r\n\r\n    useEffect(() => {\r\n        handleGetCustomers();\r\n    }, [triggerGetCustomers]);\r\n\r\n    const handleSelectCustomer = (customer: CustomerData) => {\r\n        setSelectedCustomer(customer);\r\n        localStorage.setItem('customerId', customer.id.toString());\r\n        dispatch(selectedMusteri('musteri', customer));\r\n    };\r\n\r\n    const handleOpenEditModal = (customer: CustomerData) => {\r\n        setUpdatedCustomerData(customer);\r\n        setShowEditModal(true);\r\n    };\r\n\r\n    const handleCloseEditModal = () => {\r\n        setShowEditModal(false);\r\n        setTriggerGetCustomers(!triggerGetCustomers);\r\n        setUpdatedCustomerData(null);\r\n    };\r\n\r\n    const handleGetCustomers = async () => {\r\n        try {\r\n            const response = await getCustomers(token);\r\n            console.log('Müşteriler:', response);\r\n            setCustomers(response);\r\n        } catch (error) {\r\n            console.error('Müşterileri alma hatası:', error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteCustomer = async (customerId: number) => {\r\n        try {\r\n            // Müşteriyi sil\r\n            await deleteCustomer(customerId, token);\r\n\r\n            console.log(customerId, 'idli müşteri silindi');\r\n\r\n            // Güncellenmiş müşteri listesini getir\r\n            const updatedCustomers = await getCustomers(token);\r\n            console.log('Güncellenmiş Müşteriler:', updatedCustomers);\r\n            setCustomers(updatedCustomers);\r\n\r\n            // Silinen müşteriyi seçili müşteriden kaldır (eğer seçiliyse)\r\n            if (selectedCustomer && selectedCustomer.id === customerId) {\r\n                setSelectedCustomer(null);\r\n            }\r\n\r\n            // Handle any additional logic or state updates here\r\n        } catch (error) {\r\n            console.error('Müşteri silme hatası:', error);\r\n        }\r\n    };\r\n\r\n    const handleUpdateCustomerData = async () => {\r\n        if (updatedCustomerData) {\r\n            try {\r\n                const updatedCustomer = await updateCustomer(updatedCustomerData.id, updatedCustomerData, token);\r\n                console.log(updatedCustomer, 'idli müşteri güncellendi');\r\n                // Update the customers list or perform any necessary actions after successful update\r\n\r\n                handleCloseEditModal();\r\n            } catch (error) {\r\n                console.error('Müşteri güncelleme hatası:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files && e.target.files[0];\r\n        if (file) {\r\n            setAvatar(file);\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n        setUpdatedCustomerData((prevData: any) => ({\r\n            ...prevData,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                {customers.map((customer) => (\r\n                    <Col xs={12} md={6} lg={4} key={customer.id}>\r\n                        <Card>\r\n                            <Card.Body className=\"text-center\">\r\n                                <Dropdown className=\"float-end\" align=\"end\">\r\n                                    <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\r\n                                        <i className=\"mdi mdi-dots-vertical\"></i>\r\n                                    </Dropdown.Toggle>\r\n                                    <Dropdown.Menu>\r\n                                        <Dropdown.Item onClick={() => handleOpenEditModal(customer)}>\r\n                                            {' '}\r\n                                            Düzenle\r\n                                        </Dropdown.Item>\r\n                                        <Dropdown.Item onClick={() => handleDeleteCustomer(customer.id)}>\r\n                                            {' '}\r\n                                            Sil\r\n                                        </Dropdown.Item>\r\n                                    </Dropdown.Menu>\r\n                                </Dropdown>\r\n                                <div>\r\n                                    <img\r\n                                        src=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50\"\r\n                                        alt=\"profileImage\"\r\n                                        className=\"rounded-circle avatar-xl img-thumbnail mb-2\"\r\n                                    />\r\n                                    <p className=\"text-muted font-13 mb-3\">{customer.description}</p>\r\n                                    <div className=\"text-start\">\r\n                                        <p className=\"text-muted font-13\">\r\n                                            <strong>Full Name :</strong> <span className=\"ms-2\">{customer.name}</span>\r\n                                        </p>\r\n\r\n                                        <p className=\"text-muted font-13\">\r\n                                            <strong>Mobile :</strong>\r\n                                            <span className=\"ms-2\">{customer.phone}</span>\r\n                                        </p>\r\n\r\n                                        <p className=\"text-muted font-13\">\r\n                                            <strong>Email :</strong> <span className=\"ms-2\">{customer.email}</span>\r\n                                        </p>\r\n\r\n                                        <p className=\"text-muted font-13\">\r\n                                            <strong>Adress :</strong> <span className=\"ms-2\">{customer.address}</span>\r\n                                        </p>\r\n                                        <p className=\"text-muted font-13\">\r\n                                            <strong>Firma Adı : </strong>{' '}\r\n                                            <span className=\"ms-2\">{customer.firmName}</span>\r\n                                        </p>\r\n                                    </div>\r\n                                    <Link\r\n                                        to={{\r\n                                            pathname: '/apps/projects/',\r\n                                        }}>\r\n                                        <Button\r\n                                            className=\"rounded-pill waves-effect waves-light\"\r\n                                            onClick={() => handleSelectCustomer(customer)}>\r\n                                            Müşteriyi Seç\r\n                                        </Button>\r\n                                    </Link>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                ))}\r\n            </Row>\r\n            <Modal show={showEditModal} onHide={handleCloseEditModal}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Müşteri Bilgilerini Düzenle</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <VerticalForm<CustomerData> onSubmit={handleUpdateCustomerData}>\r\n                        <FormInput\r\n                            label={'İsim Soyisim'}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            placeholder=\"İsim Giriniz\"\r\n                            containerClass={'mb-3'}\r\n                            defaultValue={updatedCustomerData?.name}\r\n                            onChange={handleInputChange}\r\n                        />\r\n\r\n                        <FormInput\r\n                            label={'Firma'}\r\n                            type=\"text\"\r\n                            name=\"firmName\"\r\n                            placeholder=\"Firma Adı\"\r\n                            containerClass={'mb-3'}\r\n                            defaultValue={updatedCustomerData?.firmName}\r\n                            onChange={handleInputChange}\r\n                        />\r\n\r\n                        <FormInput\r\n                            label={'Telefon'}\r\n                            type=\"text\"\r\n                            name=\"phone\"\r\n                            placeholder=\"Telefon Numarası\"\r\n                            containerClass={'mb-3'}\r\n                            defaultValue={updatedCustomerData?.phone}\r\n                            onChange={handleInputChange}\r\n                        />\r\n\r\n                        <FormInput\r\n                            label={'Email address'}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            containerClass={'mb-3'}\r\n                            defaultValue={updatedCustomerData?.email}\r\n                            onChange={handleInputChange}\r\n                        />\r\n\r\n                        <FormInput\r\n                            label={'Adres'}\r\n                            type=\"text\"\r\n                            name=\"address\"\r\n                            placeholder=\"Firma Adresi\"\r\n                            containerClass={'mb-3'}\r\n                            defaultValue={updatedCustomerData?.address}\r\n                            onChange={handleInputChange}\r\n                        />\r\n\r\n                        <FormInput\r\n                            label={'Açıklama'}\r\n                            type=\"text\"\r\n                            name=\"description\"\r\n                            placeholder=\"Açıklama\"\r\n                            containerClass={'mb-3'}\r\n                            defaultValue={updatedCustomerData?.description}\r\n                            onChange={handleInputChange}\r\n                        />\r\n\r\n                        <FormInput\r\n                            label={'Avatar'}\r\n                            type=\"file\"\r\n                            name=\"avatar\"\r\n                            accept=\"image/*\"\r\n                            onChange={handleAvatarChange}\r\n                            containerClass={'mb-3'}\r\n                        />\r\n                        <Button variant=\"secondary\" onClick={handleCloseEditModal}>\r\n                            İptal\r\n                        </Button>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Kaydet\r\n                        </Button>\r\n                    </VerticalForm>\r\n                </Modal.Body>\r\n                <Modal.Footer></Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ContactDetails;\r\n","\r\nimport { MusterilerActionTypes } from \"./constants\";\r\n\r\nexport type MusterilerActionType = {\r\n    type:\r\n    | MusterilerActionTypes.API_RESPONSE_SUCCESS\r\n    | MusterilerActionTypes.API_RESPONSE_ERROR\r\n    | MusterilerActionTypes.GET_MUSTERILER\r\n    | MusterilerActionTypes.GET_MUSTERI\r\n    | MusterilerActionTypes.ADD_MUSTERI\r\n    | MusterilerActionTypes.SELECTED_MUSTERI;\r\n    payload: any;\r\n};\r\n\r\nexport type MusterilerData = {\r\n    id: number;\r\n    avatar: string;\r\n    description: string;\r\n    name: string;\r\n    phone: string;\r\n    email: string;\r\n    address: string;\r\n    firmName: string;\r\n};\r\n\r\nexport const getMusteriler = (data: any): MusterilerActionType => ({\r\n    type: MusterilerActionTypes.GET_MUSTERILER,\r\n    payload: data,\r\n});\r\n\r\nexport const getMusteri = (data: any): MusterilerActionType => ({\r\n    type: MusterilerActionTypes.GET_MUSTERI,\r\n    payload: data,\r\n});\r\n\r\nexport const addMusteri = (data: any): MusterilerActionType => ({\r\n    type: MusterilerActionTypes.ADD_MUSTERI,\r\n    payload: data,\r\n});\r\n\r\nexport const selectedMusteri = (actionType:string,data: MusterilerData): MusterilerActionType => ({\r\n    type: MusterilerActionTypes.SELECTED_MUSTERI,\r\n    payload: {actionType,data},\r\n});\r\n\r\nexport const apiResponseSuccess = (data: any): MusterilerActionType => ({\r\n    type: MusterilerActionTypes.API_RESPONSE_SUCCESS,\r\n    payload: data,\r\n});\r\n\r\nexport const apiResponseError = (data: any): MusterilerActionType => ({\r\n    type: MusterilerActionTypes.API_RESPONSE_ERROR,\r\n    payload: data,\r\n});\r\n\r\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial, FieldValues } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues extends FieldValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","export class Constants {\r\n    private static readonly link = \" http://45.155.124.180:5050/\"\r\n    public static readonly API = this.link+\"api\";\r\n    public static readonly login = this.link+\"auth/login\";\r\n    public static readonly register = this.link+\"auth/register\";\r\n    public static readonly verify = this.link+\"auth/verify\"\r\n\r\n}\r\n","import axios from 'axios';\r\nimport { Constants } from '../links';\r\nimport { getToken } from '../redux/token/actions';\r\nimport { login } from './login';\r\n\r\n\r\n\r\nexport type CustomerData = {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  firmName: string;\r\n  avatar: string;\r\n  description: string;\r\n  address: string;\r\n};\r\n\r\ntype CreateCustomerResponse = {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  firmName: string;\r\n  avatar: string;\r\n  description: string;\r\n  address: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n};\r\n\r\n\r\nexport const createCustomer = async (customerData: CustomerData, token:string): Promise<CreateCustomerResponse> => {\r\n    try {\r\n       const query = `\r\n  mutation{\r\n    createCustomer(createCustomerInput: {\r\n      name: \"${customerData.name}\",\r\n      email: \"${customerData.email}\",\r\n      phone: \"${customerData.phone}\",\r\n      firmName: \"${customerData.firmName}\",\r\n      avatar: \"${customerData.avatar}\",\r\n      description: \"${customerData.description}\"\r\n      address: \"${customerData.address}\"\r\n    }) {\r\n      id\r\n      name\r\n      email\r\n      phone\r\n      firmName\r\n      avatar\r\n      description\r\n      address\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          query,\r\n          variables: {\r\n            input: customerData,\r\n          },\r\n        }),\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (response.ok) {\r\n        return result.data.createCustomer;\r\n      } else {\r\n        throw new Error(result.errors[0].message);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n  export const getCustomers = async (token: string): Promise<CreateCustomerResponse[]> => {\r\n    try {\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          query: `\r\n            query {\r\n              customers {\r\n                id\r\n                name\r\n                email\r\n                phone\r\n                firmName\r\n                avatar\r\n                description\r\n                address\r\n                createdAt\r\n                updatedAt\r\n              }\r\n            }\r\n          `\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      console.log(result)\r\n\r\n      if (response.ok) {\r\n        return result.data.customers;\r\n      } else {\r\n        throw new Error(result.errors[0].message);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n  export const deleteCustomer = async (customerId: number, token: string): Promise<void> => {\r\n    try {\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          query: `\r\n          mutation {\r\n            removeCustomer(id: ${customerId})\r\n          }\r\n          `\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      console.log(result);\r\n\r\n      if (response.ok) {\r\n        // Silme işlemi başarılı, isteğe göre gerekli işlemleri yapabilirsiniz\r\n      } else {\r\n        throw new Error(result.errors[0].message);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n  export const updateCustomer = async (customerId: number, customerData: CustomerData, token: string): Promise<CreateCustomerResponse> => {\r\n    try {\r\n        console.log(customerData,'CustomerData')\r\n        const query = JSON.stringify({\r\n            query: `\r\n              mutation {\r\n                updateCustomer(updateCustomerInput: {\r\n                  id: ${customerId},\r\n                  name: \"${customerData.name}\",\r\n                  email: \"${customerData.email}\",\r\n                  phone: \"${customerData.phone}\",\r\n                  firmName: \"${customerData.firmName}\",\r\n                  avatar: \"${customerData.avatar}\",\r\n                  description: \"${customerData.description}\",\r\n                  address: \"${customerData.address}\"\r\n                }) {\r\n                  id\r\n                  name\r\n                  email\r\n                  phone\r\n                  firmName\r\n                  avatar\r\n                  description\r\n                  address\r\n                  createdAt\r\n                  updatedAt\r\n                }\r\n              }\r\n            `\r\n          });\r\n\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body:\r\n            query\r\n\r\n      });\r\n      console.log(query,'response')\r\n\r\n      const result = await response.json();\r\n      console.log(result);\r\n\r\n      if (response.ok) {\r\n        return result.data.updateCustomer;\r\n      } else {\r\n        throw new Error(result.errors[0].message);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n  export const getCustomer = async (customerId: number, token: string) => {\r\n    try {\r\n      const query = `\r\n      query {\r\n        customer(id: ${customerId}) {\r\n          id\r\n          name\r\n          email\r\n          phone\r\n          firmName\r\n          avatar\r\n          description\r\n          address\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    `;\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          query,\r\n        }),\r\n      });\r\n\r\n      const result = await response.json();\r\n      console.log(result);\r\n\r\n      if (response.ok) {\r\n        return result.data.customer;\r\n      }\r\n      throw new Error(result.errors[0].message);\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n"],"names":["contact","customers","setCustomers","useState","selectedCustomer","setSelectedCustomer","useRedux","dispatch","appSelector","showEditModal","setShowEditModal","updatedCustomerData","setUpdatedCustomerData","setAvatar","triggerGetCustomers","setTriggerGetCustomers","token","localStorage","getItem","useEffect","handleGetCustomers","handleSelectCustomer","customer","actionType","data","setItem","id","toString","type","MusterilerActionTypes","payload","handleCloseEditModal","getCustomers","response","console","log","error","handleDeleteCustomer","customerId","deleteCustomer","updatedCustomers","handleUpdateCustomerData","updateCustomer","updatedCustomer","handleInputChange","e","target","name","value","prevData","Row","map","Col","xs","md","lg","Card","className","Dropdown","align","as","onClick","handleOpenEditModal","src","alt","description","phone","email","address","firmName","to","pathname","Button","Modal","show","onHide","closeButton","onSubmit","label","placeholder","containerClass","defaultValue","onChange","accept","file","files","variant","defaultValues","resolver","children","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","child","props","React","key","PasswordInput","refCallback","otherProps","showPassword","setShowPassword","InputGroup","Form","ref","r","isInvalid","autoComplete","classNames","TextualInput","endIcon","comp","rows","CheckInput","SelectInput","labelClassName","action","hasEndIcon","undefined","Constants","link","API","login","verify","createCustomer","customerData","query","avatar","fetch","method","headers","body","JSON","stringify","variables","input","json","result","ok","Error","message","getCustomer"],"sourceRoot":""}