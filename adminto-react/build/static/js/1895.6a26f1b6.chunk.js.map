{"version":3,"file":"static/js/1895.6a26f1b6.chunk.js","mappings":"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","sources":["components/form/VerticalForm.tsx","components/form/FormInput.tsx","links.ts","service/kategori.ts","pages/apps/Projects/index.tsx","service/sepet.ts","service/urunler.ts"],"sourcesContent":["import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial, FieldValues } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues extends FieldValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","export class Constants {\r\n    private static readonly link = \" http://45.155.124.180:5050/\"\r\n    public static readonly API = this.link+\"api\";\r\n    public static readonly login = this.link+\"auth/login\";\r\n    public static readonly register = this.link+\"auth/register\";\r\n    public static readonly verify = this.link+\"auth/verify\"\r\n\r\n}\r\n","import { Constants } from '../links';\r\n\r\nexport const createKategori = async (kategoriData: string, token: string) => {\r\n    try {\r\n        const query = `\r\n\r\n        mutation {\r\n            createCategory(createCategoryInput: {\r\n              name: \"${kategoriData}\"\r\n            }) {\r\n              id\r\n              name\r\n            }\r\n          }\r\n    `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.createCategory;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const getKategoriler = async (token: string) => {\r\n    try {\r\n        const query = `\r\n        query {\r\n            categories {\r\n              id\r\n              name\r\n              createdAt\r\n              updatedAt\r\n            }\r\n          }\r\n    `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.categories;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const getKategori = async (id: string, token: string) => {\r\n    try {\r\n        const query = `\r\n        query {\r\n            category(id: \"${id}\") {\r\n              id\r\n              name\r\n            }\r\n          }\r\n    `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.category;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n","import { Link } from 'react-router-dom';\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Card,\r\n    Col,\r\n    OverlayTrigger,\r\n    ProgressBar,\r\n    ProgressBarProps,\r\n    Row,\r\n    Tooltip,\r\n    FormSelect,\r\n    Modal,\r\n    Form,\r\n    InputGroup,\r\n    FormControl,\r\n    Dropdown,\r\n} from 'react-bootstrap';\r\nimport { BsPlus, BsDash } from 'react-icons/bs';\r\nimport classNames from 'classnames';\r\n\r\nimport TextField from '@mui/material/TextField';\r\nimport Stack from '@mui/material/Stack';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\n\r\n// hooks\r\nimport { usePageTitle } from '../../../hooks';\r\n\r\n// components\r\nimport { FormInput } from '../../../components/form';\r\n\r\n// types\r\nimport { CustomInput, ProjectsList, SepetData } from './types';\r\n\r\n// dummy data\r\n\r\nimport { ChangeEvent, useEffect, useState } from 'react';\r\nimport { useRedux } from '../../../hooks';\r\nimport { selectedSepet } from '../../../redux/sepet/actions';\r\nimport { createKategori, getKategori, getKategoriler } from '../../../service/kategori';\r\nimport { addProduct, getProducts, removeProduct, updateProduct } from '../../../service/urunler';\r\nimport { set } from 'react-hook-form';\r\nimport { createSepet, getSepet, removeCart, updateCart } from '../../../service/sepet';\r\n\r\ntype SingleProjectProps = {\r\n    searchOptions: any[];\r\n    products: any[];\r\n    setProducts: React.Dispatch<React.SetStateAction<any[]>>;\r\n};\r\n\r\nconst SingleProject = ({ searchOptions, products, setProducts }: SingleProjectProps) => {\r\n    const [selectedQuantity, setSelectedQuantity] = useState(1);\r\n    const [state, setState] = useState<string>('');\r\n    const { dispatch, appSelector } = useRedux();\r\n    const [triggerGetProducts, setTriggerGetProducts] = useState<boolean>(false);\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const [selectedProduct, setSelectedProduct] = useState<ProjectsList>();\r\n    const [updatedData, setUpdatedData] = useState<any>({});\r\n    const token = localStorage.getItem('token') || '';\r\n    const [sepet, setSepet] = useState<any[]>([]);\r\n\r\n    useEffect(() => {\r\n        handleGetCartItems();\r\n    }, [setSepet]);\r\n\r\n    useEffect(() => {\r\n        handleGetProducts();\r\n    }, [setProducts, setTriggerGetProducts]);\r\n    const checkStock = (stock: number) => {\r\n        if (stock == 0) {\r\n            return 'Stok Yok';\r\n        }\r\n        if (stock < 100) {\r\n            return 'Stok Az';\r\n        }\r\n        return 'Stok Var';\r\n    };\r\n\r\n    const openEditModal = (product: any) => {\r\n        console.log('(80 PROD):', product);\r\n        const prod = {\r\n            id: product.id,\r\n            title: product.title,\r\n            price: product.price,\r\n            stock: product.stock,\r\n            description: product.description,\r\n            variant: product.quantity >= 100 ? 'success' : product.variant,\r\n        };\r\n        setModalVisible(true);\r\n        setUpdatedData(prod);\r\n\r\n        setSelectedProduct(product);\r\n        console.log('Ürün:', product);\r\n    };\r\n    const handleInputChange = (e: any) => {\r\n        const { name, value } = e.target;\r\n        setUpdatedData((prevData: any) => ({\r\n            ...prevData,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const updateStockStatus = () => {\r\n        const updatedStockLabels: { [key: string]: string } = {};\r\n\r\n        products.forEach((project) => {\r\n            const stockStatus = checkStock(project.stock);\r\n            updatedStockLabels[project.id] = stockStatus;\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        updateStockStatus();\r\n    }, []);\r\n\r\n    const addToCart = async (project: ProjectsList, quantity: number) => {\r\n        const existingCartItem = sepet.find((item) => item.products.id === project.id);\r\n        if (existingCartItem) {\r\n            const updatedCartItem = {\r\n                ...existingCartItem,\r\n                quantity: existingCartItem.quantity + quantity,\r\n            };\r\n            setSepet(sepet.map((item) => (item.products.id === project.id ? updatedCartItem : item)));\r\n            try {\r\n                await updateCartQuantity(existingCartItem.id, updatedCartItem.quantity);\r\n                console.log('Sepet güncellendi:', existingCartItem.id);\r\n            } catch (error) {\r\n                console.error('Sepet güncelleme hatası:', error);\r\n            }\r\n        } else {\r\n            try {\r\n                console.log('Sepet oluşturuluyor:', project);\r\n                const response = await createSepet(project, quantity, token);\r\n                setSepet([...sepet, response]);\r\n                console.log('Sepet oluşturuldu:', response);\r\n            } catch (error) {\r\n                console.error('Sepet oluşturma hatası:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const updateCartQuantity = async (cartItemId: number, quantity: number) => {\r\n        try {\r\n            await updateCart(cartItemId, quantity, token);\r\n        } catch (error) {\r\n            console.error('Hata:', error);\r\n        }\r\n    };\r\n\r\n    const handleSelectQuantity = async (value: string) => {\r\n        setSelectedQuantity(Number(value));\r\n    };\r\n\r\n    const handleGetProducts = async () => {\r\n        try {\r\n            const response = await getProducts(token); // Fetch categories from the database\r\n            setProducts(response); // Update the search options with the formatted categories\r\n            console.log('Ürünler:', response);\r\n        } catch (error) {\r\n            console.error('Error fetching categories:', error);\r\n        }\r\n    };\r\n    const getCategoryName = (categoryId: string) => {\r\n        const category = searchOptions.find((option) => option.id === categoryId);\r\n        return category ? category.name : '';\r\n    };\r\n\r\n    const handleRemoveProduct = async (id: number) => {\r\n        console.log('remove', id);\r\n        await removeProduct(id, token);\r\n        setProducts(products.filter((item) => item.id !== id));\r\n    };\r\n\r\n    const handleUpdateProduct = async () => {\r\n        try {\r\n            setSelectedProduct({ ...selectedProduct, ...updatedData });\r\n            console.log('Güncellenen Ürün:', updatedData);\r\n            await updateProduct(updatedData, token);\r\n\r\n            setModalVisible(false);\r\n        } catch (error) {\r\n            console.error('Ürün güncelleme hatası:', error);\r\n        }\r\n    };\r\n\r\n    const handleRemoveFromCart = async (id: number) => {\r\n        await removeCart(id, token);\r\n        setSepet(sepet.filter((item) => item.id !== id));\r\n    };\r\n\r\n    const handleGetCartItems = async () => {\r\n        try {\r\n            const response = await getSepet(token); // Fetch categories from the database\r\n            setSepet(response); // Update the search options with the formatted categories\r\n            console.log('Sepet:', response);\r\n        } catch (error) {\r\n            console.error('Error fetching categories:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            {(products || []).map((product, index) => {\r\n                return (\r\n                    <Col xl={4} key={index.toString()}>\r\n                        <Card>\r\n                            <Card.Body className=\"project-box\">\r\n                                <Dropdown className=\"float-end\" align=\"end\">\r\n                                    <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\r\n                                        <i className=\"mdi mdi-dots-vertical\"></i>\r\n                                    </Dropdown.Toggle>\r\n                                    <Dropdown.Menu>\r\n                                        <Dropdown.Item onClick={() => openEditModal(product)}> Düzenle</Dropdown.Item>\r\n                                        <Dropdown.Item onClick={() => handleRemoveProduct(product.id)}>\r\n                                            {' '}\r\n                                            Sil\r\n                                        </Dropdown.Item>\r\n                                    </Dropdown.Menu>\r\n                                </Dropdown>\r\n                                <Modal show={modalVisible} onHide={() => setModalVisible(false)}>\r\n                                    <Modal.Header closeButton>\r\n                                        <Modal.Title>Ürünleri Düzenle</Modal.Title>\r\n                                    </Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <Form>\r\n                                            <Form.Group className=\"mb-3\">\r\n                                                <Form.Label>Ürün Adı</Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    name=\"title\"\r\n                                                    value={updatedData.title || ''}\r\n                                                    onChange={handleInputChange}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Form.Group className=\"mb-3\">\r\n                                                <Form.Label>Ürün Fiyatı</Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    name=\"price\"\r\n                                                    value={updatedData.price || ''}\r\n                                                    onChange={handleInputChange}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Form.Group className=\"mb-3\">\r\n                                                <Form.Label>Ürün Stoğu</Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    name=\"stock\"\r\n                                                    value={updatedData.stock}\r\n                                                    onChange={handleInputChange}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Form.Group className=\"mb-3\">\r\n                                                <Form.Label>Ürün Açıklaması</Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    name=\"description\"\r\n                                                    value={updatedData.description || ''}\r\n                                                    onChange={handleInputChange}\r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Form>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer>\r\n                                        <Button variant=\"secondary\" onClick={() => setModalVisible(false)}>\r\n                                            İptal\r\n                                        </Button>\r\n                                        <Button variant=\"primary\" onClick={() => handleUpdateProduct()}>\r\n                                            Düzenle\r\n                                        </Button>\r\n                                    </Modal.Footer>\r\n                                </Modal>\r\n                                <Badge bg={product.variant} className=\"float-end\">\r\n                                    {state}\r\n                                </Badge>\r\n                                <h4 className=\"mt-0\">\r\n                                    <Link to=\"#\" className=\"text-dark\">\r\n                                        {product.title}\r\n                                    </Link>\r\n                                </h4>\r\n                                <p className={classNames('text-' + product.variant, 'text-uppercase', 'font-13')}>\r\n                                    {getCategoryName(product.categoryId)}\r\n                                </p>\r\n\r\n                                <p className=\"text-muted font-13\">\r\n                                    {product.description}\r\n                                    <Link to=\"#\" className=\"text-primary\">\r\n                                        View more\r\n                                    </Link>\r\n                                </p>\r\n\r\n                                <ul className=\"list-inline\">\r\n                                    <li className=\"list-inline-item me-4\">\r\n                                        <h4 className=\"mb-0\">${product.price}</h4>\r\n                                        <p className=\"text-muted\">Fiyat</p>\r\n                                    </li>\r\n                                    {product.customInputs.map((input: any, index: number) => (\r\n                                        <li className=\"list-inline-item\" key={index.toString()}>\r\n                                            <h4 className=\"mb-0\">{input.value}</h4>\r\n                                            <p className=\"text-muted\">{input.key}</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n\r\n                                <h5 className=\"mb-2 fw-semibold\">\r\n                                    Stok\r\n                                    <span className={classNames('float-end', 'text-' + product.variant)}>\r\n                                        {product.stock}KG\r\n                                    </span>\r\n                                </h5>\r\n                                <ProgressBar\r\n                                    className={classNames('quantity-bar-alt-' + product.variant, 'quantity-sm')}>\r\n                                    <ProgressBar\r\n                                        variant={product.variant}\r\n                                        now={product.stock}\r\n                                        max={1000}\r\n                                        className=\"quantity-animated\"\r\n                                    />\r\n                                </ProgressBar>\r\n                                <input\r\n                                    key={index}\r\n                                    type=\"number\"\r\n                                    className=\"form-control mt-3\"\r\n                                    value={selectedQuantity.toString()}\r\n                                    onChange={(e) => handleSelectQuantity(e.target.value)}></input>\r\n                                <Button\r\n                                    variant=\"outline-primary\"\r\n                                    className=\"btn-sm mt-3\"\r\n                                    onClick={() => addToCart(product, selectedQuantity)}>\r\n                                    <i className=\"mdi mdi-cart me-1\"></i>\r\n                                    Sepete Ekle\r\n                                </Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                );\r\n            })}\r\n            {sepet.length >= 0 && (\r\n                <Col xl={12}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h4 className=\"header-title mb-3\">Sepet</h4>\r\n                            <div className=\"table-responsive\">\r\n                                <table className=\"table table-centered table-nowrap\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th style={{ width: '70px' }}>Ürün</th>\r\n                                            <th>Ürün Adı</th>\r\n                                            <th>Özellikler</th>\r\n                                            <th>Adet</th>\r\n                                            <th>Fiyat</th>\r\n                                            <th>Toplam</th>\r\n                                            <th style={{ width: '50px' }}></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {sepet.map((item, index) => {\r\n                                            return (\r\n                                                <tr key={index.toString()}>\r\n                                                    <td>\r\n                                                        <img\r\n                                                            src=\"https://w7.pngwing.com/pngs/346/530/png-transparent-wire-mesh-fence-wire-mesh-fence-blocked-isolated-garden-fence-wire-braid-fenced-enclosure.png\"\r\n                                                            alt={item.products.title}\r\n                                                            title={item.products.title}\r\n                                                            className=\"avatar-sm\"\r\n                                                        />\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <h5 className=\"m-0\">{item.products.title}</h5>\r\n                                                    </td>\r\n                                                    <td\r\n                                                        style={{\r\n                                                            width: '200px',\r\n                                                        }}>\r\n                                                        {item.products.customInputs.map((input: any, index: number) => (\r\n                                                            <div key={index.toString()}>\r\n                                                                <h5 className=\"m-0\">{input.key}</h5>\r\n                                                                <p className=\"m-0\">{input.value}</p>\r\n                                                            </div>\r\n                                                        ))}\r\n                                                    </td>\r\n\r\n                                                    <td>\r\n                                                        <h5 className=\"m-0\">{item.quantity}</h5>\r\n                                                    </td>\r\n                                                    <td>{item.products.price}</td>\r\n                                                    <td>{item.products.price * item.quantity}</td>\r\n                                                    <td>\r\n                                                        <OverlayTrigger\r\n                                                            placement=\"top\"\r\n                                                            overlay={<Tooltip>Remove</Tooltip>}>\r\n                                                            <Button\r\n                                                                variant=\"light\"\r\n                                                                className=\"btn-sm\"\r\n                                                                onClick={() => handleRemoveFromCart(item.id)}>\r\n                                                                <i className=\"mdi mdi-close\"></i>\r\n                                                            </Button>\r\n                                                        </OverlayTrigger>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        })}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <Row>\r\n                                <Col sm={6}>\r\n                                    <Link to=\"/apps/contacts\" className=\"btn btn-secondary waves-effect waves-light\">\r\n                                        <i className=\"mdi mdi-arrow-left\"></i> Geri\r\n                                    </Link>\r\n                                </Col>\r\n                                <Col sm={6}>\r\n                                    <div className=\"text-sm-end mt-2 mt-sm-0\">\r\n                                        <Link\r\n                                            to={{\r\n                                                pathname: `/pages/invoice/`,\r\n                                            }}>\r\n                                            <Button variant=\"success\" className=\"waves-effect waves-light\">\r\n                                                <i className=\"mdi mdi-cash-multiple me-1\"></i> Onayla\r\n                                            </Button>\r\n                                        </Link>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            )}\r\n        </Row>\r\n    );\r\n};\r\n\r\nconst Projects = () => {\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const [customInputs, setCustomInputs] = useState<CustomInput[]>([{ name: '', placeholder: '' }]);\r\n    const [kategoriInput, setKategoriInput] = useState('');\r\n    const [existingKategoriler, setExistingKategoriler] = useState<string[]>([]);\r\n    const [avatar, setAvatar] = useState<File>() || '';\r\n    const [name, setName] = useState<string>('');\r\n    const [price, setPrice] = useState<number>(0);\r\n    const [stock, setStock] = useState<number>(0);\r\n    const [description, setDescription] = useState<string>('');\r\n    const [variant, setVariant] = useState<string>('');\r\n    const [res, setRes] = useState<any>();\r\n\r\n    const [searchInputValue, setSearchInputValue] = useState<string>('');\r\n    const [searchOptions, setSearchOptions] = useState<any[]>([]);\r\n    const [triggerGetKategoriler, setTriggerGetKategoriler] = useState<boolean>(false);\r\n    const [products, setProducts] = useState<any[]>([]);\r\n\r\n    const token = localStorage.getItem('token') || '';\r\n\r\n    const categoryObject = {\r\n        id: '',\r\n        name: '',\r\n    };\r\n\r\n    useEffect(() => {\r\n        hangleGetKategoriler();\r\n    }, [res]);\r\n\r\n    // set pagetitle\r\n    usePageTitle({\r\n        title: 'Ürünler',\r\n        breadCrumbItems: [\r\n            {\r\n                path: 'apps/projects',\r\n                label: 'Apps',\r\n            },\r\n            {\r\n                path: 'apps/projects',\r\n                label: 'Projects',\r\n                active: true,\r\n            },\r\n        ],\r\n    });\r\n\r\n    const toggleModal = () => {\r\n        setModalVisible(!modalVisible);\r\n    };\r\n\r\n    const handleAddProject = () => {\r\n        toggleModal();\r\n    };\r\n\r\n    const handleAddInput = (index: number, key: string = '', value: string = ''): void => {\r\n        const list = [...customInputs];\r\n        list[index][key] = value;\r\n        setCustomInputs(list);\r\n    };\r\n\r\n    function handleRemoveInput(index: number): void {\r\n        const list = [...customInputs];\r\n        list.splice(index, 1);\r\n        setCustomInputs(list);\r\n    }\r\n\r\n    const handleSaveProduct = async () => {\r\n        toggleModal();\r\n\r\n        if (searchInputValue) {\r\n            try {\r\n                console.log('Kategori oluşturuluyor:', searchInputValue, 'exist', existingKategoriler);\r\n                // Check if the category already exists\r\n                const categoryExists = existingKategoriler.some(\r\n                    (x) => x.toLowerCase() === searchInputValue.toLowerCase()\r\n                );\r\n\r\n                if (!categoryExists) {\r\n                    console.log('Yeni kategori oluşturuluyor:', searchInputValue);\r\n                    const response = await createKategori(searchInputValue, token);\r\n                    categoryObject.id = response.id;\r\n                    categoryObject.name = response.name;\r\n                    console.log('Yeni kategori oluşturuldu:', response);\r\n\r\n                    // Update the existing categories with the newly added category\r\n                    setExistingKategoriler([...existingKategoriler, searchInputValue]);\r\n                    setTriggerGetKategoriler(!triggerGetKategoriler);\r\n                } else {\r\n                    const category = existingKategoriler.find(\r\n                        (x) => x.toLowerCase() === searchInputValue.toLowerCase()\r\n                    );\r\n                    console.log('Kategori id:', category);\r\n                    const kategoriObject = searchOptions.find((option) => option.name === category);\r\n                    console.log('Kategori object:', kategoriObject);\r\n                    categoryObject.id = kategoriObject?.id;\r\n                    categoryObject.name = kategoriObject?.name;\r\n                }\r\n\r\n                // Save the product information to the database\r\n                const productData = {\r\n                    name: name,\r\n                    price: price,\r\n                    stock: stock,\r\n                    description: description,\r\n                    variant: stock >= 100 ? 'success' : stock < 100 ? 'warning' : stock === 0 ? 'danger' : 'danger',\r\n                    categoryId: {\r\n                        id: categoryObject.id,\r\n                        name: categoryObject.name,\r\n                    },\r\n                    customFields: customInputs,\r\n                    image: 'avatar',\r\n                };\r\n                console.log('Ürün kaydediliyor:', productData);\r\n\r\n                // Perform the API request to save the product data to the database\r\n                const response = await addProduct(productData, token);\r\n\r\n                setProducts([...products, response]);\r\n\r\n                // Perform additional operations after saving the product, such as updating or reloading the product data\r\n            } catch (error) {\r\n                console.error('Ürün kaydetme hatası:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const hangleGetKategoriler = async () => {\r\n        try {\r\n            const response = await getKategoriler(token); // Fetch categories from the database\r\n\r\n            setExistingKategoriler(response.map((x: any) => x.name));\r\n\r\n            setSearchOptions(response); // Update the search options with the formatted categories\r\n        } catch (error) {\r\n            console.error('Error fetching categories:', error);\r\n        }\r\n    };\r\n\r\n    const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files && e.target.files[0];\r\n        if (file) {\r\n            setAvatar(file);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Modal show={modalVisible} onHide={toggleModal}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Ürün Ekle</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Col sm={8}>\r\n                            <Stack spacing={2} sx={{ width: 310, height: 70 }}>\r\n                                <Autocomplete\r\n                                    freeSolo\r\n                                    id=\"free-solo-2-demo\"\r\n                                    disableClearable\r\n                                    options={searchOptions.map((option) => option.name)}\r\n                                    onInputChange={(event, value) => setSearchInputValue(value)}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            label=\"Kategori Ara\"\r\n                                            InputProps={{\r\n                                                ...params.InputProps,\r\n                                                type: 'search',\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Stack>\r\n\r\n                            <FormInput\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Ürün Adı\"\r\n                                containerClass={'mb-3'}\r\n                                onChange={(e: ChangeEvent<HTMLInputElement>) => setName(e.target.value)}\r\n                            />\r\n\r\n                            <FormInput\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Ürün Fiyatı\"\r\n                                containerClass={'mb-3'}\r\n                                onChange={(e: ChangeEvent<HTMLInputElement>) => setPrice(Number(e.target.value))}\r\n                            />\r\n                            <FormInput\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Ürün Stoğu\"\r\n                                containerClass={'mb-3'}\r\n                                onChange={(e: ChangeEvent<HTMLInputElement>) => setStock(Number(e.target.value))}\r\n                            />\r\n                            <FormInput\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Ürün Açıklaması\"\r\n                                containerClass={'mb-3'}\r\n                                onChange={(e: ChangeEvent<HTMLInputElement>) => setDescription(e.target.value)}\r\n                            />\r\n                            <FormInput\r\n                                label={'Avatar'}\r\n                                type=\"file\"\r\n                                name=\"avatar\"\r\n                                accept=\"image/*\"\r\n                                onChange={handleAvatarChange}\r\n                                containerClass={'mb-3'}\r\n                            />\r\n                            <Form.Group>\r\n                                <Form.Label>Özel Alanlar</Form.Label>\r\n                                {customInputs.map((input, index) => (\r\n                                    <InputGroup key={index} className=\"mb-3\">\r\n                                        <FormControl\r\n                                            placeholder=\"Alan Adı\"\r\n                                            value={input.name}\r\n                                            onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n                                                handleAddInput(index, 'name', e.target.value)\r\n                                            }\r\n                                        />\r\n                                        <FormControl\r\n                                            placeholder=\"Alan Değeri\"\r\n                                            value={input.placeholder}\r\n                                            onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n                                                handleAddInput(index, 'placeholder', e.target.value)\r\n                                            }\r\n                                        />\r\n                                        <Button variant=\"danger\" onClick={() => handleRemoveInput(index)}>\r\n                                            <BsDash />\r\n                                        </Button>\r\n                                    </InputGroup>\r\n                                ))}\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    onClick={() => setCustomInputs([...customInputs, { name: '', placeholder: '' }])}>\r\n                                    <BsPlus />\r\n                                </Button>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={toggleModal}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={handleSaveProduct}>\r\n                            Save\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                <Col sm={4}>\r\n                    <Button variant=\"primary\" className=\"mb-3\" onClick={handleAddProject}>\r\n                        <i className=\"mdi mdi-plus-circle me-1\"></i> Ürün Ekle\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <SingleProject searchOptions={searchOptions} products={products} setProducts={setProducts} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Projects;\r\n","import { Constants } from \"../links\";\r\n\r\n\r\nexport const createSepet = async (sepetData: any, quantity: number, token: string) => {\r\n    try {\r\n      const query = `\r\n        mutation CreateCart($productId: Int!, $quantity: Int!) {\r\n          createCart(createCartInput: {\r\n            productId: $productId,\r\n            quantity: $quantity,\r\n          }) {\r\n            id\r\n            products {\r\n              id\r\n              image\r\n              title\r\n              category {\r\n                id\r\n                name\r\n              }\r\n              price\r\n              stock\r\n              description\r\n              variant\r\n              createdAt\r\n              updatedAt\r\n              customInputs {\r\n                key\r\n                value\r\n              }\r\n            }\r\n            quantity\r\n            createdAt\r\n            updatedAt\r\n          }\r\n        }\r\n      `;\r\n\r\n      const variables = {\r\n        productId: sepetData.id,\r\n        quantity: quantity,\r\n      };\r\n\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          query,\r\n          variables,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n      if (data.errors) {\r\n        throw new Error(data.errors[0].message);\r\n      }\r\n      return data.data.createCart;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\nexport const getSepet = async (token: string) => {\r\n    try {\r\n        const query = `\r\n        query {\r\n            carts {\r\n              id\r\n              products {\r\n                id\r\n                image\r\n                title\r\n                category {\r\n                  id\r\n                  name\r\n                }\r\n                price\r\n                stock\r\n                description\r\n                variant\r\n                createdAt\r\n                updatedAt\r\n                customInputs {\r\n                  key\r\n                  value\r\n                }\r\n              }\r\n              quantity\r\n              createdAt\r\n              updatedAt\r\n            }\r\n          }\r\n\r\n        `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.carts;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n    }\r\n\r\nexport const updateCart = async (id: number, quantity: number, token: string) => {\r\n    console.log(id, quantity);\r\n\r\n    try {\r\n        const query = `\r\n        mutation {\r\n            updateCart(updateCartInput: {\r\n              id: ${id}\r\n              quantity: ${quantity}\r\n            }) {\r\n              id\r\n              products {\r\n                id\r\n                image\r\n                title\r\n                category {\r\n                    id\r\n                    name\r\n                }\r\n                price\r\n                stock\r\n                description\r\n                variant\r\n                createdAt\r\n                updatedAt\r\n                customInputs {\r\n                  key\r\n                  value\r\n                }\r\n              }\r\n              quantity\r\n              createdAt\r\n              updatedAt\r\n            }\r\n          }\r\n        `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.updateCart;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n    }\r\n\r\n\r\n\r\n\r\nexport const removeCart = async (id: number, token: string) => {\r\n    try {\r\n        console.log(id);\r\n        const query = `\r\n        mutation ($id: Int!) {\r\n            removeCart(id: $id)\r\n          }\r\n        `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n                variables: {\r\n                    id,\r\n                },\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n            return data.data.removeCart;\r\n        }\r\n        throw new Error(data.errors[0].message);\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n        throw error;\r\n    }\r\n    }","import axios from 'axios';\r\nimport { Constants } from '../links';\r\nimport { CustomInput } from '../pages/apps/Projects/types';\r\n\r\nexport const addProduct = async (productData: any, token: string) => {\r\n\r\n  const customInputs = productData.customFields.map((item: CustomInput) => {\r\n    return {\r\n      key: item.name,\r\n      value: item.placeholder,\r\n    };\r\n  });\r\n\r\n  console.log(productData)\r\n\r\n  const categoryId = productData.categoryId.id\r\n  console.log(categoryId)\r\n\r\n\r\n\r\n  try {\r\n    const query = `\r\n  mutation CreateProduct($customInputs: [CustomInput!], $categoryId: Int!) {\r\n    createProduct(createProductInput: {\r\n      image: \"${productData.image}\",\r\n      title: \"${productData.name}\",\r\n      categoryId: $categoryId,\r\n      price: ${productData.price},\r\n      stock: ${productData.stock},\r\n      variant: \"${productData.variant}\",\r\n      description: \"${productData.description}\",\r\n      customInputs: $customInputs\r\n    }) {\r\n      id\r\n      image\r\n      title\r\n      category {\r\n        id\r\n        name\r\n      }\r\n      price\r\n      stock\r\n      variant\r\n      description\r\n      customInputs {\r\n        key\r\n        value\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\nconst variables = {\r\n  customInputs: customInputs,\r\n  categoryId: categoryId,\r\n};\r\n\r\n\r\n    // GraphQL isteği gönder\r\n    const response = await fetch(Constants.API, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: variables,\r\n      }),\r\n\r\n    });\r\n\r\n    console.log(response);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    if (response.ok) {\r\n      return data.data.createProduct;\r\n    }\r\n    throw new Error(data.errors[0].message);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getProducts = async (token: string) => {\r\n  try {\r\n    const query = ` query {\r\n      products {\r\n        id\r\n        image\r\n        title\r\n        category {\r\n          id\r\n          name\r\n        }\r\n        price\r\n        stock\r\n        variant\r\n        description\r\n        customInputs {\r\n          key\r\n          value\r\n        }\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n    `;\r\n\r\n\r\n    const response = await fetch(Constants.API, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n\r\n      }),\r\n    });\r\n\r\n\r\n\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return data.data.products;\r\n    }\r\n    throw new Error(data.errors[0].message);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const removeProduct = async (id: number, token: string) => {\r\n  try {\r\n    console.log(id);\r\n    const query = `\r\n    mutation ($id: Int!) {\r\n      removeProduct(id: $id)\r\n    }\r\n    `;\r\n\r\n    const response = await fetch(Constants.API, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: {\r\n          id: id,\r\n        },\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    console.log(data);\r\n    if (response.ok) {\r\n      return data.data.removeProduct;\r\n    }\r\n    throw new Error(data.errors[0].message);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const updateProduct = async (productData: any, token: string) => {\r\n\r\n  if(productData.stock >= 100){\r\n    productData.variant = \"success\"\r\n  }\r\n  else if(productData.stock < 100){\r\n    productData.variant = \"warning\"\r\n  }\r\n  else if(productData.stock <= 1){\r\n    productData.variant = \"danger\"\r\n  }\r\n\r\n\r\n  try {\r\n    // GraphQL sorgusu\r\n    const query = `\r\n    mutation {\r\n      updateProduct(updateProductInput: {\r\n        id: ${productData.id},\r\n        title: \"${productData.title}\",\r\n        price: ${productData.price},\r\n        stock: ${productData.stock},\r\n        variant: \"${productData.variant}\",\r\n        description: \"${productData.description}\",\r\n      }) {\r\n        id\r\n        title\r\n        price\r\n        stock\r\n        variant\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n    `;\r\n\r\n    // GraphQL isteği gönder\r\n    const response = await fetch(Constants.API, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: {\r\n          input: productData,\r\n        },\r\n      }),\r\n\r\n    });\r\n\r\n    console.log(response);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    if (response.ok) {\r\n      return data.data.updateProduct;\r\n    }\r\n    throw new Error(data.errors[0].message);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const updateStock = async (id: number, stock: number, token: string) => {\r\n  try {\r\n    // GraphQL sorgusu\r\n    const query = `\r\n    mutation {\r\n      updateProduct(updateProductInput: {\r\n        id: ${id},\r\n        stock: ${stock},\r\n      }) {\r\n        id\r\n        title\r\n        price\r\n        stock\r\n        variant\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n    `;\r\n\r\n    // GraphQL isteği gönder\r\n    const response = await fetch(Constants.API, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: {\r\n          input: id,\r\n        },\r\n      }),\r\n\r\n    });\r\n\r\n    console.log(response);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    if (response.ok) {\r\n      return data.data.updateProduct;\r\n    }\r\n    throw new Error(data.errors[0].message);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n"],"names":["defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","otherProps","useState","showPassword","setShowPassword","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","TextualInput","endIcon","comp","rows","CheckInput","label","SelectInput","labelClassName","containerClass","action","hasEndIcon","undefined","Constants","link","API","login","verify","createKategori","kategoriData","token","query","fetch","method","headers","Authorization","body","JSON","stringify","response","json","data","Error","message","createCategory","console","log","getKategoriler","categories","SingleProject","searchOptions","products","setProducts","selectedQuantity","setSelectedQuantity","state","useRedux","dispatch","appSelector","setTriggerGetProducts","modalVisible","setModalVisible","selectedProduct","setSelectedProduct","updatedData","setUpdatedData","localStorage","getItem","sepet","setSepet","useEffect","handleGetCartItems","handleGetProducts","handleInputChange","e","target","value","prevData","updatedStockLabels","forEach","project","stock","stockStatus","updateStockStatus","addToCart","quantity","existingCartItem","find","item","updatedCartItem","updateCartQuantity","error","createSepet","cartItemId","updateCart","handleSelectQuantity","Number","getProducts","getCategoryName","categoryId","category","option","handleRemoveProduct","removeProduct","filter","handleUpdateProduct","updateProduct","handleRemoveFromCart","removeCart","getSepet","Row","product","index","Col","xl","Card","Dropdown","align","prod","title","price","description","variant","openEditModal","Modal","show","onHide","closeButton","onChange","Button","Badge","bg","to","customInputs","input","toString","ProgressBar","now","max","length","style","width","src","alt","OverlayTrigger","placement","overlay","Tooltip","sm","pathname","setCustomInputs","existingKategoriler","setExistingKategoriler","setAvatar","setName","setPrice","setStock","setDescription","res","searchInputValue","setSearchInputValue","setSearchOptions","triggerGetKategoriler","setTriggerGetKategoriler","categoryObject","hangleGetKategoriler","usePageTitle","breadCrumbItems","path","active","toggleModal","handleAddInput","list","handleSaveProduct","some","x","toLowerCase","kategoriObject","productData","customFields","image","addProduct","Stack","spacing","sx","height","Autocomplete","freeSolo","disableClearable","options","onInputChange","event","renderInput","params","TextField","InputProps","accept","file","files","FormControl","splice","handleRemoveInput","sepetData","variables","productId","createCart","carts","ok","createProduct","updateStock"],"sourceRoot":""}