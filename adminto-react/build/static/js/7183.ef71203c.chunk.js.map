{"version":3,"file":"static/js/7183.ef71203c.chunk.js","mappings":"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","sources":["links.ts","service/states.ts","pages/apps/Siparisler/index.tsx","service/siparisler.ts"],"sourcesContent":["export class Constants {\r\n    private static readonly link = \" http://45.155.124.180:5050/\"\r\n    public static readonly API = this.link+\"api\";\r\n    public static readonly login = this.link+\"auth/login\";\r\n    public static readonly register = this.link+\"auth/register\";\r\n    public static readonly verify = this.link+\"auth/verify\"\r\n\r\n}\r\n","import { Constants } from \"../links\";\r\n\r\nexport const createState = async (stateData: string, token: string) => {\r\n    try {\r\n        const query = `\r\n        mutation {\r\n        createState(createStateInput: {\r\n            name: \"${stateData}\"\r\n        }) {\r\n            id\r\n            name\r\n        }\r\n        }\r\n        `;\r\n        const response = await fetch(Constants.API, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n            query,\r\n        }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n        throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.createState;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n    }\r\n\r\nexport const getStates = async (token: string) => {\r\n    try {\r\n        const query = `\r\n        query {\r\n            states {\r\n              id\r\n              name\r\n              createdAt\r\n              updatedAt\r\n            }\r\n          }\r\n    `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.states;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import { Link } from 'react-router-dom';\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Card,\r\n    Col,\r\n    OverlayTrigger,\r\n    ProgressBar,\r\n    ProgressBarProps,\r\n    Row,\r\n    Tooltip,\r\n    FormSelect,\r\n    Modal,\r\n    Form,\r\n    InputGroup,\r\n    FormControl,\r\n} from 'react-bootstrap';\r\nimport { BsPlus, BsDash } from 'react-icons/bs';\r\nimport classNames from 'classnames';\r\nimport { useEffect, useState } from 'react';\r\n\r\n// hooks\r\nimport { usePageTitle } from '../../../hooks';\r\n\r\n// components\r\nimport { FormInput } from '../../../components/form';\r\nimport { SiparislerList } from './types';\r\nimport { deleteSiparis, getSiparisler, updateSiparis } from '../../../service/siparisler';\r\nimport { getStates } from '../../../service/states';\r\n\r\ntype SiparislerProps = {\r\n    siparis: SiparislerList;\r\n};\r\n\r\nconst Siparisler = () => {\r\n    // set page title\r\n    usePageTitle({\r\n        title: 'Siparisler',\r\n        breadCrumbItems: [\r\n            {\r\n                path: 'apps/siparisler',\r\n                label: 'Apps',\r\n            },\r\n            {\r\n                path: 'apps/siparisler',\r\n                label: 'Siparisler',\r\n                active: true,\r\n            },\r\n        ],\r\n    });\r\n\r\n    useEffect(() => {\r\n        handleGetSiparisler();\r\n        handleGetStates();\r\n    }, []);\r\n\r\n    const token = localStorage.getItem('token') || '';\r\n    const [orders, setOrders] = useState<any[]>([]);\r\n    const [states, setStates] = useState<any[]>([]);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [selectedStateId, setSelectedStateId] = useState<Number | null>(null);\r\n\r\n    const dummyData: SiparislerList[] = [\r\n        {\r\n            id: 1,\r\n            title: 'Ürün 1',\r\n            shortDesc: 'Ürün 1 açıklama',\r\n            category: 'Kategori 1',\r\n            price: 100,\r\n            quantity: 1,\r\n            image: 'https://via.placeholder.com/300x200',\r\n            state: 'Hazırlanıyor',\r\n            variant: 'warning',\r\n            urun: 'Ürün 1',\r\n        },\r\n    ];\r\n\r\n    const [sepet, setSepet] = useState<SiparislerList[]>([]);\r\n\r\n    const [item, setitem] = useState<SiparislerList | null>(null);\r\n    const [selectedItem, setSelectedItem] = useState<any | null>(null);\r\n\r\n    const sepeteEkle = (siparis: SiparislerList) => {\r\n        setSepet((prevSepet) => [...prevSepet, siparis]);\r\n    };\r\n\r\n    const siparisiOnayla = (siparis: SiparislerList) => {\r\n        console.log('Siparişi onayla:', siparis);\r\n        setitem(siparis);\r\n        setModalShow(true);\r\n        setSelectedItem(siparis.id);\r\n    };\r\n\r\n    const handleClose = () => setModalShow(false);\r\n\r\n    const handleGetSiparisler = async () => {\r\n        try {\r\n            const response = await getSiparisler(token);\r\n            console.log(response);\r\n            setOrders(response);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleGetStates = async () => {\r\n        try {\r\n            const response = await getStates(token);\r\n            console.log(response);\r\n            setStates(response);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleUpdateState = async (orderId: number, stateId: number) => {\r\n        if (stateId === null) {\r\n            // State ID is not selected, handle the error condition\r\n            return;\r\n        }\r\n\r\n        try {\r\n            console.log(orderId, stateId);\r\n            const response = await updateSiparis(orderId, stateId, token);\r\n            // Update the order with the updated state\r\n            const updatedOrders = orders.map((order) => {\r\n                if (order.id === orderId) {\r\n                    return {\r\n                        ...order,\r\n                        state: {\r\n                            id: stateId,\r\n                            name: response.state.name,\r\n                            createdAt: response.state.createdAt,\r\n                            updatedAt: response.state.updatedAt,\r\n                        },\r\n                    };\r\n                }\r\n                return order;\r\n            });\r\n            setOrders(updatedOrders);\r\n            handleClose();\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (id: number) => {\r\n        try {\r\n            await deleteSiparis(id, token);\r\n            const updatedOrders = orders.filter((order) => order.id !== id);\r\n            setOrders(updatedOrders);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-centered table-nowrap table-hover mb-0\">\r\n                                <thead className=\"table-light\">\r\n                                    <tr>\r\n                                        <th style={{ width: '20px' }}>\r\n                                            <div className=\"form-check font-size-16\">\r\n                                                <input type=\"checkbox\" className=\"form-check-input\" id=\"customCheck1\" />\r\n                                                <label className=\"form-check-label\" htmlFor=\"customCheck1\">\r\n                                                    &nbsp;\r\n                                                </label>\r\n                                            </div>\r\n                                        </th>\r\n                                        <th>Firma</th>\r\n                                        <th>Toplam</th>\r\n                                        <th>Durum</th>\r\n                                        <th>İşlem</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {orders\r\n                                        .sort((a, b) => a.id - b.id)\r\n                                        .map((item) => (\r\n                                            <tr key={item.id}>\r\n                                                <td>\r\n                                                    <div className=\"form-check font-size-16\">\r\n                                                        <input\r\n                                                            type=\"checkbox\"\r\n                                                            className=\"form-check-input\"\r\n                                                            id={`customCheck${item.id}`}\r\n                                                        />\r\n                                                        <label\r\n                                                            className=\"form-check-label\"\r\n                                                            htmlFor={`customCheck${item.id}`}>\r\n                                                            &nbsp;\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <h5 className=\"font-size-14 mb-1\">\r\n                                                        <Link to=\"#\" className=\"text-dark\">\r\n                                                            {item.customer.firmName}\r\n                                                        </Link>\r\n                                                    </h5>\r\n                                                    <p className=\"text-muted mb-0\">{item.shortDesc}</p>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {item.products.reduce(\r\n                                                        (total: number, productItem: any) =>\r\n                                                            total +\r\n                                                            productItem.quantity * productItem.product.price * 1.2,\r\n                                                        0\r\n                                                    )}{' '}\r\n                                                    TL\r\n                                                </td>\r\n\r\n                                                <td>\r\n                                                    {item.state.name === 'Onaylandı' && (\r\n                                                        <OverlayTrigger\r\n                                                            placement=\"top\"\r\n                                                            overlay={<Tooltip>{item.state.name}</Tooltip>}>\r\n                                                            <Badge bg=\"warning\">{item.state.name}</Badge>\r\n                                                        </OverlayTrigger>\r\n                                                    )}\r\n                                                    {item.state.name === 'Hazırlanıyor' && (\r\n                                                        <OverlayTrigger\r\n                                                            placement=\"top\"\r\n                                                            overlay={<Tooltip>{item.state.name}</Tooltip>}>\r\n                                                            <Badge bg=\"info\">{item.state.name}</Badge>\r\n                                                        </OverlayTrigger>\r\n                                                    )}\r\n                                                    {item.state.name === 'Yolda' && (\r\n                                                        <OverlayTrigger\r\n                                                            placement=\"top\"\r\n                                                            overlay={<Tooltip>{item.state.name}</Tooltip>}>\r\n                                                            <Badge bg=\"success\">{item.state.name}</Badge>\r\n                                                        </OverlayTrigger>\r\n                                                    )}\r\n                                                    {item.state.name === 'Tamamlandı' && (\r\n                                                        <OverlayTrigger\r\n                                                            placement=\"top\"\r\n                                                            overlay={<Tooltip>{item.state.name}</Tooltip>}>\r\n                                                            <Badge bg=\"danger\">{item.state.name}</Badge>\r\n                                                        </OverlayTrigger>\r\n                                                    )}\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Button\r\n                                                        variant=\"success\"\r\n                                                        className=\"btn-sm\"\r\n                                                        onClick={() => sepeteEkle(item)}>\r\n                                                        <i className=\"fas fa-file-invoice\"></i>\r\n                                                    </Button>\r\n                                                    <Button\r\n                                                        style={{ marginLeft: '5px' }}\r\n                                                        variant=\"primary\"\r\n                                                        className=\"btn-sm\"\r\n                                                        onClick={() => siparisiOnayla(item)}>\r\n                                                        <i className=\"fas fa-edit\"></i>\r\n                                                    </Button>\r\n                                                    <Button\r\n                                                        style={{ marginLeft: '5px' }}\r\n                                                        variant=\"danger\"\r\n                                                        className=\"btn-sm\"\r\n                                                        onClick={() => handleDelete(item.id)}>\r\n                                                        <i className=\"fas fa-trash\"></i>\r\n                                                    </Button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    {sepet.length > 0 && (\r\n                                        <tr>\r\n                                            <td colSpan={5}>\r\n                                                <div className=\"text-end\">\r\n                                                    <Button\r\n                                                        variant=\"danger\"\r\n                                                        className=\"btn-sm\"\r\n                                                        onClick={() => setSepet([])}>\r\n                                                        <BsDash />\r\n                                                    </Button>\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        {orders.map((item) => (\r\n                            <Modal show={modalShow} onHide={handleClose}>\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title>Siparis Detayları</Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    <Row>\r\n                                        <Col md={6}>\r\n                                            <Card>\r\n                                                <Card.Body>\r\n                                                    <Card.Title>Ürün Detayları</Card.Title>\r\n                                                    {item.products.map((product: any) => (\r\n                                                        <Card.Text>\r\n                                                            <strong>Ürün:</strong> {product.product.title} -{' '}\r\n                                                            {product.product.price} TL\r\n                                                        </Card.Text>\r\n                                                    ))}\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        </Col>\r\n                                        <Col md={6}>\r\n                                            <Card>\r\n                                                <Card.Body>\r\n                                                    <Card.Title>Adres Bilgileri</Card.Title>\r\n                                                    <Card.Text>\r\n                                                        <strong>Adres:</strong> {item.customer.address}\r\n                                                    </Card.Text>\r\n                                                    <Card.Text>\r\n                                                        <strong>Telefon:</strong> {item.customer.phone}\r\n                                                    </Card.Text>\r\n                                                    <Card.Text>\r\n                                                        <strong>Email:</strong> {item.customer.email}\r\n                                                    </Card.Text>\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        </Col>\r\n\r\n                                        <Card.Text>\r\n                                            <strong>Siparis Tarihi:</strong> {item.createdAt}\r\n                                        </Card.Text>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <Card.Body>\r\n                                                    <Card.Title>Siparis Durumu</Card.Title>\r\n                                                    <FormSelect\r\n                                                        aria-label=\"Default select example\"\r\n                                                        onChange={(e) => setSelectedStateId(Number(e.target.value))}>\r\n                                                        <option>Seçiniz</option>\r\n                                                        {states.map((state) => (\r\n                                                            <option value={state.id}>{state.name}</option>\r\n                                                        ))}\r\n                                                    </FormSelect>\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                                        Kapat\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"primary\"\r\n                                        disabled={selectedStateId === null}\r\n                                        onClick={() => handleUpdateState(selectedItem, Number(selectedStateId))}>\r\n                                        Kaydet\r\n                                    </Button>\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                        ))}\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default Siparisler;\r\n","import { Constants } from '../links';\r\n\r\nexport const createSiparis = async (siparisData: any, token: string) => {\r\n    const customerId = localStorage.getItem('customerId');\r\n    console.log(siparisData);\r\n    const variables = {\r\n        input: {\r\n            stateId: 1,\r\n            variant: 'danger',\r\n            products: siparisData.products.map((siparis:any) => {\r\n                return {\r\n             productId: siparis.products.id,\r\n             quantity: siparis.quantity\r\n            }\r\n            }),\r\n            customerId: Number(customerId),\r\n        }\r\n    };\r\n\r\n    console.log(variables)\r\n\r\n    try {\r\n        const query = `\r\n        mutation CreateOrder($input: CreateOrderInput!) {\r\n            createOrder(createOrderInput: $input) {\r\n              id\r\n              state{\r\n                id\r\n                name\r\n                createdAt\r\n                updatedAt\r\n              }\r\n              variant\r\n              customer{\r\n                id\r\n                name\r\n                email\r\n                phone\r\n                address\r\n                firmName\r\n                avatar\r\n                description\r\n                address\r\n                createdAt\r\n                updatedAt\r\n              }\r\n              products {\r\n                  id\r\n                  orderId\r\n                  quantity\r\n                  productId\r\n              }\r\n              createdAt\r\n              updatedAt\r\n            }\r\n          }\r\n        `;\r\n        const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n            query,\r\n            variables,\r\n        }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n        throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.createOrder;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n    }\r\n\r\nexport const getSiparisler = async (token: string) => {\r\n    try {\r\n        const query = `\r\n        query {\r\n            orders {\r\n              id\r\n              customer {\r\n                  id\r\n                  name\r\n                  email\r\n                  firmName\r\n              }\r\n              state {\r\n                  id\r\n                  name\r\n              }\r\n              total\r\n              variant\r\n              products {\r\n                  orderId\r\n                  productId\r\n                  quantity\r\n                  product {\r\n                      price\r\n                      title\r\n                      createdAt\r\n                      updatedAt\r\n                      category {\r\n                          id\r\n                          name\r\n                      }\r\n                      customInputs {\r\n                          key\r\n                          value\r\n                      }\r\n                  }\r\n              }\r\n              invoice {\r\n                  fileName\r\n                  mimeType\r\n                  proforma\r\n              }\r\n              createdAt\r\n              updatedAt\r\n            }\r\n          }\r\n\r\n    `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.orders;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const updateSiparis = async (id: number, stateId: number, token: string) => {\r\n    try {\r\n      const query = `\r\n        mutation UpdateOrder($input: UpdateOrderInput!) {\r\n          updateOrder(updateOrderInput: $input) {\r\n            id\r\n            state {\r\n              id\r\n              name\r\n              createdAt\r\n              updatedAt\r\n            }\r\n            variant\r\n            customer {\r\n              id\r\n              name\r\n              email\r\n              phone\r\n              address\r\n              firmName\r\n              avatar\r\n              description\r\n              address\r\n              createdAt\r\n              updatedAt\r\n            }\r\n            products {\r\n              id\r\n              orderId\r\n              quantity\r\n              productId\r\n            }\r\n            createdAt\r\n            updatedAt\r\n          }\r\n        }\r\n      `;\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          query,\r\n          variables: {\r\n            input: {\r\n              id: id, // Update variable name to \"id\"\r\n              stateId: stateId,\r\n              variant: 'danger',\r\n            },\r\n          },\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(data);\r\n      if (data.errors) {\r\n        throw new Error(data.errors[0].message);\r\n      }\r\n      return data.data.updateOrder;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  export const deleteSiparis = async (id: number, token: string) => {\r\n    try {\r\n      const query = `\r\n      mutation RemoveOrder($orderId: Int!) {\r\n        removeOrder(id: $orderId)\r\n      }\r\n      `;\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          query,\r\n            variables: {\r\n                orderId: id,\r\n            },\r\n        }),\r\n        });\r\n        const data = await response.json();\r\n        console.log(data);\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.removeOrder;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n    };\r\n    "],"names":["Constants","link","API","login","register","verify","getStates","token","fetch","method","headers","Authorization","body","JSON","stringify","query","response","json","data","errors","Error","message","states","console","log","usePageTitle","title","breadCrumbItems","path","label","active","useEffect","handleGetSiparisler","handleGetStates","localStorage","getItem","useState","orders","setOrders","setStates","modalShow","setModalShow","selectedStateId","setSelectedStateId","sepet","setSepet","setitem","selectedItem","setSelectedItem","handleClose","getSiparisler","handleUpdateState","orderId","stateId","updateSiparis","updatedOrders","map","order","id","state","name","createdAt","updatedAt","handleDelete","deleteSiparis","filter","Row","Col","Card","className","style","width","type","htmlFor","sort","a","b","item","to","customer","firmName","shortDesc","products","reduce","total","productItem","quantity","product","price","OverlayTrigger","placement","overlay","Tooltip","Badge","bg","Button","variant","onClick","siparis","prevSepet","marginLeft","length","colSpan","Modal","show","onHide","closeButton","md","address","phone","email","FormSelect","onChange","e","Number","target","value","disabled","createSiparis","siparisData","customerId","variables","input","productId","createOrder","updateOrder","removeOrder"],"sourceRoot":""}