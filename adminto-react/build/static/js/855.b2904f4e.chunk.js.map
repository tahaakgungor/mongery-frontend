{"version":3,"file":"static/js/855.b2904f4e.chunk.js","mappings":"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","sources":["links.ts","pages/other/Invoice.tsx","pages/other/data.ts","service/musteri.ts","service/sepet.ts","service/siparisler.ts","service/urunler.ts","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","../node_modules/react-bootstrap/esm/divWithClassName.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export class Constants {\r\n    private static readonly link = \" http://45.155.124.180:5050/\"\r\n    public static readonly API = this.link+\"api\";\r\n    public static readonly login = this.link+\"auth/login\";\r\n    public static readonly register = this.link+\"auth/register\";\r\n    public static readonly verify = this.link+\"auth/verify\"\r\n\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { Card, Col, Row } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport LogoDark from '../../assets/images/logo-dark.png';\r\nimport LogoLight from '../../assets/images/logo-light.png';\r\n// hooks\r\nimport { usePageTitle } from '../../hooks';\r\n\r\n// data\r\nimport { invoiceDetails } from './data';\r\nimport { useRedux } from '../../hooks';\r\nimport { createSiparis } from '../../service/siparisler';\r\nimport { getSepet } from '../../service/sepet';\r\nimport { getCustomer } from '../../service/musteri';\r\nimport { updateProduct, updateStock } from '../../service/urunler';\r\n\r\nconst Invoice = () => {\r\n    // set pagetitle\r\n\r\n    usePageTitle({\r\n        title: 'Invoice',\r\n        breadCrumbItems: [\r\n            {\r\n                path: '/pages/invoice',\r\n                label: 'Extra Pages',\r\n            },\r\n            {\r\n                path: '/pages/invoice',\r\n                label: 'Invoice',\r\n                active: true,\r\n            },\r\n        ],\r\n    });\r\n\r\n    const { dispatch, appSelector } = useRedux();\r\n\r\n    const token = localStorage.getItem('token') || '';\r\n\r\n    const [countProforma, setCountProforma] = useState(0);\r\n    const musteri = appSelector((state) => state.Musteriler.musteriler);\r\n    console.log(musteri);\r\n    const currentDate = new Date();\r\n    const day = currentDate.getDate();\r\n    const monthNames = [\r\n        'Ocak',\r\n        'Şubat',\r\n        'Mart',\r\n        'Nisan',\r\n        'Mayıs',\r\n        'Haziran',\r\n        'Temmuz',\r\n        'Ağustos',\r\n        'Eylül',\r\n        'Ekim',\r\n        'Kasım',\r\n        'Aralık',\r\n    ];\r\n    const monthIndex = currentDate.getMonth();\r\n    const month = monthNames[monthIndex];\r\n    const year = currentDate.getFullYear();\r\n    const formattedDate = `${day} ${month} ${year}`;\r\n\r\n    const [proformaNumber, setProformaNumber] = useState(1);\r\n    const [customerInfo, setCustomerInfo] = useState<any>({});\r\n\r\n    console.log(formattedDate);\r\n\r\n    console.log(formattedDate);\r\n\r\n    const [sepet, setSepet] = useState<any>([]);\r\n\r\n    const customerId = localStorage.getItem('customerId') || '';\r\n\r\n    const parsedCustomerId = parseInt(customerId);\r\n\r\n    useEffect(() => {\r\n        handleGetSepet();\r\n    }, [setSepet]);\r\n    console.log(sepet);\r\n    console.log(musteri);\r\n    const itemCount = sepet.length;\r\n\r\n    useEffect(() => {\r\n        handleGetCustomer();\r\n    }, [setSepet]);\r\n\r\n    // Calculate subtotal dynamically\r\n    const subTotal = sepet.reduce((total: any, item: any) => total + item.quantity * item.products.price, 0);\r\n\r\n    useEffect(() => {\r\n        // Update the order number when a new order is created\r\n        setProformaNumber((prevNumber) => prevNumber + 1);\r\n    }, []);\r\n\r\n    const handleSaveOrder = async () => {\r\n        try {\r\n            const data = {\r\n                customerId: parsedCustomerId,\r\n                stateId: 1,\r\n                createdAt: formattedDate,\r\n                products: sepet,\r\n                price: subTotal,\r\n                quantity: itemCount,\r\n                toplamFiyat: subTotal,\r\n            };\r\n            console.log(data);\r\n            const res = await createSiparis(data, token);\r\n            console.log(res);\r\n\r\n            for (const item of sepet) {\r\n                const updatedStock = item.products.stock - item.quantity;\r\n                console.log(updatedStock);\r\n                // Ürünün stok sayısını güncelleme işlemini yapmak için ilgili servisi kullanabilirsiniz\r\n                await updateStock(item.products.id, updatedStock, token);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n    const handleFinishClick = () => {\r\n        // Yönlendirmek istediğiniz sayfa yolunu buraya yazın\r\n\r\n        setCountProforma(countProforma + 1);\r\n        handleSaveOrder();\r\n        // window.location.href = '/apps/siparisler';\r\n    };\r\n\r\n    const handleGetSepet = async () => {\r\n        try {\r\n            const response = await getSepet(token);\r\n            console.log(response);\r\n            setSepet(response);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleGetCustomer = async () => {\r\n        try {\r\n            const response = await getCustomer(parsedCustomerId, token);\r\n            console.log(response);\r\n            setCustomerInfo(response);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <div className=\"panel-body\">\r\n                            <div className=\"clearfix\">\r\n                                <div className=\"float-start\">\r\n                                    <span className=\"logo-lg\">\r\n                                        <img src={LogoDark} alt=\"\" height=\"22\" />\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"float-end\">\r\n                                    <h4>\r\n                                        Proforma #\r\n                                        <br />\r\n                                        <strong>{`${day}${monthIndex + 1}${year}${countProforma}`}</strong>\r\n                                    </h4>\r\n                                </div>\r\n                            </div>\r\n                            <hr />\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <div className=\"float-start mt-3\">\r\n                                        <address>\r\n                                            <strong>{customerInfo.firmName}</strong>\r\n                                            <br />\r\n                                            {customerInfo.address}\r\n                                            <br />\r\n                                            <abbr title=\"Phone\">Telefon:</abbr> {customerInfo.phone}\r\n                                            <br />\r\n                                            <abbr title=\"İsim\">İsim:</abbr> {customerInfo.name}\r\n                                            <br />\r\n                                            <abbr title=\"Email\">Email:</abbr> {customerInfo.email}\r\n                                        </address>\r\n                                    </div>\r\n                                    <div className=\"float-end mt-3\">\r\n                                        <p>\r\n                                            <strong>Sipariş Oluşturulma Tarihi: </strong> {formattedDate}\r\n                                        </p>\r\n                                        <p className=\"m-t-10\">\r\n                                            <strong>Sipariş Durumu: </strong>{' '}\r\n                                            <span className=\"label label-pink\">{invoiceDetails.order_status}</span>\r\n                                        </p>\r\n                                        <p className=\"m-t-10\">\r\n                                            <strong>Sipariş Numarası: {proformaNumber} </strong>\r\n                                        </p>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <div className=\"table-responsive\">\r\n                                        <table className=\"table mt-4\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>#</th>\r\n                                                    <th>Ürün</th>\r\n                                                    <th>Özellikler</th>\r\n                                                    <th>Adet</th>\r\n                                                    <th>Birim Fiyat</th>\r\n                                                    <th>Toplam</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {sepet.map((item: any, index: any) => {\r\n                                                    return (\r\n                                                        <tr key={item.id}>\r\n                                                            <td>{index + 1}</td>\r\n                                                            <td>{item.products.title}</td>\r\n                                                            <td\r\n                                                                style={{\r\n                                                                    width: '200px',\r\n                                                                }}>\r\n                                                                {item.products.customInputs.map(\r\n                                                                    (input: any, index: number) => (\r\n                                                                        <div key={index.toString()}>\r\n                                                                            <h5 className=\"m-0\">{input.key}</h5>\r\n                                                                            <p className=\"m-0\">{input.value}</p>\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                )}\r\n                                                            </td>\r\n                                                            <td>{item.quantity}</td>\r\n                                                            <td>{item.products.price}</td>\r\n                                                            <td>{item.quantity * item.products.price}</td>\r\n                                                        </tr>\r\n                                                    );\r\n                                                })}\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xl={6} xs={6} className=\"col-xl-6 col-6\">\r\n                                    <div className=\"clearfix mt-4\">\r\n                                        <h5 className=\"small text-dark fw-normal\">Ödeme Politikası</h5>\r\n\r\n                                        <small>\r\n                                            All accounts are to be paid within 7 days from receipt of invoice. To be\r\n                                            paid by cheque or credit card or direct payment online. If account is not\r\n                                            paid within 7 days the credits details supplied as confirmation of work\r\n                                            undertaken will be charged the agreed quoted fee noted above.\r\n                                        </small>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col xs={6} xl={{ offset: 3, span: 3 }} className=\"col-xl-3 col-6 offset-xl-3\">\r\n                                    <p className=\"text-end\">\r\n                                        <b>Tutar:</b> {subTotal}\r\n                                    </p>\r\n\r\n                                    <p className=\"text-end\">KDV: {invoiceDetails.vat}%</p>\r\n                                    <hr />\r\n                                    <h3 className=\"text-end\">TL {subTotal * 1.2}</h3>\r\n                                </Col>\r\n                            </Row>\r\n                            <hr />\r\n                            <div className=\"d-print-none\">\r\n                                <div className=\"float-end\">\r\n                                    <Link\r\n                                        to=\"#\"\r\n                                        className=\"btn btn-dark waves-effect waves-light me-1\"\r\n                                        onClick={(e) => {\r\n                                            window.print();\r\n                                        }}>\r\n                                        <i className=\"fa fa-print\"></i>\r\n                                    </Link>\r\n                                    <Link to=\"/apps/siparisler\">\r\n                                        <button\r\n                                            className=\"btn btn-primary waves-effect waves-light\"\r\n                                            onClick={handleFinishClick}>\r\n                                            Bitir\r\n                                        </button>\r\n                                    </Link>\r\n                                </div>\r\n                                <div className=\"clearfix\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default Invoice;\r\n","// types\nimport { PricingPlan, Invoice } from './types';\n\nconst pricingPlans: PricingPlan[] = [\n    {\n        id: 1,\n        name: 'Basic',\n        price: 19,\n        duration: 'Month',\n        features: ['5 Projects', '1 GB Storage', 'No Domain', '1 User', '24x7 Support'],\n        isPopular: false,\n    },\n    {\n        id: 1,\n        name: 'Premium',\n        price: 29,\n        duration: 'Month',\n        features: ['5 Projects', '1 GB Storage', 'No Domain', '1 User', '24x7 Support'],\n        isPopular: true,\n    },\n    {\n        id: 2,\n        name: 'Developer',\n        price: 39,\n        duration: 'Month',\n        features: ['5 Projects', '1 GB Storage', 'No Domain', '1 User', '24x7 Support'],\n        isPopular: false,\n    },\n    {\n        id: 3,\n        name: 'Business',\n        price: 49,\n        duration: 'Month',\n        features: ['5 Projects', '1 GB Storage', 'No Domain', '1 User', '24x7 Support'],\n        isPopular: false,\n    },\n];\n\nconst pricingPlans2: PricingPlan[] = [\n    {\n        id: 1,\n        name: 'Basic',\n        price: 19,\n        duration: 'Month',\n        features: ['5 Projects', '1 GB Storage', 'No Domain', '1 User', '24x7 Support'],\n        isPopular: false,\n    },\n    {\n        id: 1,\n        name: 'Premium',\n        price: 29,\n        duration: 'Month',\n        features: ['5 Projects', '1 GB Storage', 'No Domain', '1 User', '24x7 Support'],\n        isPopular: true,\n    },\n    {\n        id: 2,\n        name: 'Developer',\n        price: 39,\n        duration: 'Month',\n        features: ['5 Projects', '1 GB Storage', 'No Domain', '1 User', '24x7 Support'],\n        isPopular: false,\n    },\n];\n\nconst invoiceDetails: Invoice = {\n    invoice_id: '2023-06-300001',\n    customer: 'Cem Akgüngör',\n    notes: 'Thanks a lot because you keep purchasing our products. Our company promises to provide high quality products for you as well as outstanding customer service for every transaction.',\n    order_date: ' 30 Haziran 2023',\n    order_status: 'Sipariş Alındı',\n    order_id: '#3218',\n    address: {\n        owner: 'Mongery Yazılım',\n        line_1: 'Mahfesığmaz Mah. 79048 SK. No: 4/2 Daire: 3 Çukurova/ADANA',\n        city: 'Adana',\n        state: 'Türkiye',\n        zip: 999,\n        phone: '+90 (536) 960 30 53',\n    },\n    items: [\n        {\n            id: 1,\n            name: 'Tel',\n            description: '2x5',\n            quantity: 20,\n            unit_cost: '$500',\n            total: '$10000',\n        },\n        {\n            id: 2,\n            name: 'Çivi',\n            description: 'Çivi',\n            quantity: 50,\n            unit_cost: '$50',\n            total: '$2500',\n        },\n        {\n            id: 3,\n            name: 'Jiletli Tel',\n            description: 'Jiletli Tel Kalın',\n            quantity: 15,\n            unit_cost: '$500',\n            total: '$7500',\n        },\n       \n    ],\n    sub_total: 20000.0,\n    discount: 10,\n    vat: 20.0,\n    total: 21600.0,\n};\n\nexport { pricingPlans, pricingPlans2, invoiceDetails };\n","import axios from 'axios';\r\nimport { Constants } from '../links';\r\nimport { getToken } from '../redux/token/actions';\r\nimport { login } from './login';\r\n\r\n\r\n\r\nexport type CustomerData = {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  firmName: string;\r\n  avatar: string;\r\n  description: string;\r\n  address: string;\r\n};\r\n\r\ntype CreateCustomerResponse = {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  firmName: string;\r\n  avatar: string;\r\n  description: string;\r\n  address: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n};\r\n\r\n\r\nexport const createCustomer = async (customerData: CustomerData, token:string): Promise<CreateCustomerResponse> => {\r\n    try {\r\n       const query = `\r\n  mutation{\r\n    createCustomer(createCustomerInput: {\r\n      name: \"${customerData.name}\",\r\n      email: \"${customerData.email}\",\r\n      phone: \"${customerData.phone}\",\r\n      firmName: \"${customerData.firmName}\",\r\n      avatar: \"${customerData.avatar}\",\r\n      description: \"${customerData.description}\"\r\n      address: \"${customerData.address}\"\r\n    }) {\r\n      id\r\n      name\r\n      email\r\n      phone\r\n      firmName\r\n      avatar\r\n      description\r\n      address\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          query,\r\n          variables: {\r\n            input: customerData,\r\n          },\r\n        }),\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (response.ok) {\r\n        return result.data.createCustomer;\r\n      } else {\r\n        throw new Error(result.errors[0].message);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n  export const getCustomers = async (token: string): Promise<CreateCustomerResponse[]> => {\r\n    try {\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          query: `\r\n            query {\r\n              customers {\r\n                id\r\n                name\r\n                email\r\n                phone\r\n                firmName\r\n                avatar\r\n                description\r\n                address\r\n                createdAt\r\n                updatedAt\r\n              }\r\n            }\r\n          `\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      console.log(result)\r\n\r\n      if (response.ok) {\r\n        return result.data.customers;\r\n      } else {\r\n        throw new Error(result.errors[0].message);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n  export const deleteCustomer = async (customerId: number, token: string): Promise<void> => {\r\n    try {\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          query: `\r\n          mutation {\r\n            removeCustomer(id: ${customerId})\r\n          }\r\n          `\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      console.log(result);\r\n\r\n      if (response.ok) {\r\n        // Silme işlemi başarılı, isteğe göre gerekli işlemleri yapabilirsiniz\r\n      } else {\r\n        throw new Error(result.errors[0].message);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n  export const updateCustomer = async (customerId: number, customerData: CustomerData, token: string): Promise<CreateCustomerResponse> => {\r\n    try {\r\n        console.log(customerData,'CustomerData')\r\n        const query = JSON.stringify({\r\n            query: `\r\n              mutation {\r\n                updateCustomer(updateCustomerInput: {\r\n                  id: ${customerId},\r\n                  name: \"${customerData.name}\",\r\n                  email: \"${customerData.email}\",\r\n                  phone: \"${customerData.phone}\",\r\n                  firmName: \"${customerData.firmName}\",\r\n                  avatar: \"${customerData.avatar}\",\r\n                  description: \"${customerData.description}\",\r\n                  address: \"${customerData.address}\"\r\n                }) {\r\n                  id\r\n                  name\r\n                  email\r\n                  phone\r\n                  firmName\r\n                  avatar\r\n                  description\r\n                  address\r\n                  createdAt\r\n                  updatedAt\r\n                }\r\n              }\r\n            `\r\n          });\r\n\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body:\r\n            query\r\n\r\n      });\r\n      console.log(query,'response')\r\n\r\n      const result = await response.json();\r\n      console.log(result);\r\n\r\n      if (response.ok) {\r\n        return result.data.updateCustomer;\r\n      } else {\r\n        throw new Error(result.errors[0].message);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n  export const getCustomer = async (customerId: number, token: string) => {\r\n    try {\r\n      const query = `\r\n      query {\r\n        customer(id: ${customerId}) {\r\n          id\r\n          name\r\n          email\r\n          phone\r\n          firmName\r\n          avatar\r\n          description\r\n          address\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n    `;\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          query,\r\n        }),\r\n      });\r\n\r\n      const result = await response.json();\r\n      console.log(result);\r\n\r\n      if (response.ok) {\r\n        return result.data.customer;\r\n      }\r\n      throw new Error(result.errors[0].message);\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n","import { Constants } from \"../links\";\r\n\r\n\r\nexport const createSepet = async (sepetData: any, quantity: number, token: string) => {\r\n    try {\r\n      const query = `\r\n        mutation CreateCart($productId: Int!, $quantity: Int!) {\r\n          createCart(createCartInput: {\r\n            productId: $productId,\r\n            quantity: $quantity,\r\n          }) {\r\n            id\r\n            products {\r\n              id\r\n              image\r\n              title\r\n              category {\r\n                id\r\n                name\r\n              }\r\n              price\r\n              stock\r\n              description\r\n              variant\r\n              createdAt\r\n              updatedAt\r\n              customInputs {\r\n                key\r\n                value\r\n              }\r\n            }\r\n            quantity\r\n            createdAt\r\n            updatedAt\r\n          }\r\n        }\r\n      `;\r\n\r\n      const variables = {\r\n        productId: sepetData.id,\r\n        quantity: quantity,\r\n      };\r\n\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          query,\r\n          variables,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n      if (data.errors) {\r\n        throw new Error(data.errors[0].message);\r\n      }\r\n      return data.data.createCart;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\nexport const getSepet = async (token: string) => {\r\n    try {\r\n        const query = `\r\n        query {\r\n            carts {\r\n              id\r\n              products {\r\n                id\r\n                image\r\n                title\r\n                category {\r\n                  id\r\n                  name\r\n                }\r\n                price\r\n                stock\r\n                description\r\n                variant\r\n                createdAt\r\n                updatedAt\r\n                customInputs {\r\n                  key\r\n                  value\r\n                }\r\n              }\r\n              quantity\r\n              createdAt\r\n              updatedAt\r\n            }\r\n          }\r\n\r\n        `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.carts;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n    }\r\n\r\nexport const updateCart = async (id: number, quantity: number, token: string) => {\r\n    console.log(id, quantity);\r\n\r\n    try {\r\n        const query = `\r\n        mutation {\r\n            updateCart(updateCartInput: {\r\n              id: ${id}\r\n              quantity: ${quantity}\r\n            }) {\r\n              id\r\n              products {\r\n                id\r\n                image\r\n                title\r\n                category {\r\n                    id\r\n                    name\r\n                }\r\n                price\r\n                stock\r\n                description\r\n                variant\r\n                createdAt\r\n                updatedAt\r\n                customInputs {\r\n                  key\r\n                  value\r\n                }\r\n              }\r\n              quantity\r\n              createdAt\r\n              updatedAt\r\n            }\r\n          }\r\n        `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.updateCart;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n    }\r\n\r\n\r\n\r\n\r\nexport const removeCart = async (id: number, token: string) => {\r\n    try {\r\n        console.log(id);\r\n        const query = `\r\n        mutation ($id: Int!) {\r\n            removeCart(id: $id)\r\n          }\r\n        `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n                variables: {\r\n                    id,\r\n                },\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n            return data.data.removeCart;\r\n        }\r\n        throw new Error(data.errors[0].message);\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n        throw error;\r\n    }\r\n    }","import { Constants } from '../links';\r\n\r\nexport const createSiparis = async (siparisData: any, token: string) => {\r\n    const customerId = localStorage.getItem('customerId');\r\n    console.log(siparisData);\r\n    const variables = {\r\n        input: {\r\n            stateId: 1,\r\n            variant: 'danger',\r\n            products: siparisData.products.map((siparis:any) => {\r\n                return {\r\n             productId: siparis.products.id,\r\n             quantity: siparis.quantity\r\n            }\r\n            }),\r\n            customerId: Number(customerId),\r\n        }\r\n    };\r\n\r\n    console.log(variables)\r\n\r\n    try {\r\n        const query = `\r\n        mutation CreateOrder($input: CreateOrderInput!) {\r\n            createOrder(createOrderInput: $input) {\r\n              id\r\n              state{\r\n                id\r\n                name\r\n                createdAt\r\n                updatedAt\r\n              }\r\n              variant\r\n              customer{\r\n                id\r\n                name\r\n                email\r\n                phone\r\n                address\r\n                firmName\r\n                avatar\r\n                description\r\n                address\r\n                createdAt\r\n                updatedAt\r\n              }\r\n              products {\r\n                  id\r\n                  orderId\r\n                  quantity\r\n                  productId\r\n              }\r\n              createdAt\r\n              updatedAt\r\n            }\r\n          }\r\n        `;\r\n        const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n            query,\r\n            variables,\r\n        }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n        throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.createOrder;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n    }\r\n\r\nexport const getSiparisler = async (token: string) => {\r\n    try {\r\n        const query = `\r\n        query {\r\n            orders {\r\n              id\r\n              customer {\r\n                  id\r\n                  name\r\n                  email\r\n                  firmName\r\n              }\r\n              state {\r\n                  id\r\n                  name\r\n              }\r\n              total\r\n              variant\r\n              products {\r\n                  orderId\r\n                  productId\r\n                  quantity\r\n                  product {\r\n                      price\r\n                      title\r\n                      createdAt\r\n                      updatedAt\r\n                      category {\r\n                          id\r\n                          name\r\n                      }\r\n                      customInputs {\r\n                          key\r\n                          value\r\n                      }\r\n                  }\r\n              }\r\n              invoice {\r\n                  fileName\r\n                  mimeType\r\n                  proforma\r\n              }\r\n              createdAt\r\n              updatedAt\r\n            }\r\n          }\r\n\r\n    `;\r\n        const response = await fetch(Constants.API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                query,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.orders;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const updateSiparis = async (id: number, stateId: number, token: string) => {\r\n    try {\r\n      const query = `\r\n        mutation UpdateOrder($input: UpdateOrderInput!) {\r\n          updateOrder(updateOrderInput: $input) {\r\n            id\r\n            state {\r\n              id\r\n              name\r\n              createdAt\r\n              updatedAt\r\n            }\r\n            variant\r\n            customer {\r\n              id\r\n              name\r\n              email\r\n              phone\r\n              address\r\n              firmName\r\n              avatar\r\n              description\r\n              address\r\n              createdAt\r\n              updatedAt\r\n            }\r\n            products {\r\n              id\r\n              orderId\r\n              quantity\r\n              productId\r\n            }\r\n            createdAt\r\n            updatedAt\r\n          }\r\n        }\r\n      `;\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          query,\r\n          variables: {\r\n            input: {\r\n              id: id, // Update variable name to \"id\"\r\n              stateId: stateId,\r\n              variant: 'danger',\r\n            },\r\n          },\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(data);\r\n      if (data.errors) {\r\n        throw new Error(data.errors[0].message);\r\n      }\r\n      return data.data.updateOrder;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  export const deleteSiparis = async (id: number, token: string) => {\r\n    try {\r\n      const query = `\r\n      mutation RemoveOrder($orderId: Int!) {\r\n        removeOrder(id: $orderId)\r\n      }\r\n      `;\r\n      const response = await fetch(Constants.API, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          query,\r\n            variables: {\r\n                orderId: id,\r\n            },\r\n        }),\r\n        });\r\n        const data = await response.json();\r\n        console.log(data);\r\n        if (data.errors) {\r\n            throw new Error(data.errors[0].message);\r\n        }\r\n        return data.data.removeOrder;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n    };\r\n    ","import axios from 'axios';\r\nimport { Constants } from '../links';\r\nimport { CustomInput } from '../pages/apps/Projects/types';\r\n\r\nexport const addProduct = async (productData: any, token: string) => {\r\n\r\n  const customInputs = productData.customFields.map((item: CustomInput) => {\r\n    return {\r\n      key: item.name,\r\n      value: item.placeholder,\r\n    };\r\n  });\r\n\r\n  console.log(productData)\r\n\r\n  const categoryId = productData.categoryId.id\r\n  console.log(categoryId)\r\n\r\n\r\n\r\n  try {\r\n    const query = `\r\n  mutation CreateProduct($customInputs: [CustomInput!], $categoryId: Int!) {\r\n    createProduct(createProductInput: {\r\n      image: \"${productData.image}\",\r\n      title: \"${productData.name}\",\r\n      categoryId: $categoryId,\r\n      price: ${productData.price},\r\n      stock: ${productData.stock},\r\n      variant: \"${productData.variant}\",\r\n      description: \"${productData.description}\",\r\n      customInputs: $customInputs\r\n    }) {\r\n      id\r\n      image\r\n      title\r\n      category {\r\n        id\r\n        name\r\n      }\r\n      price\r\n      stock\r\n      variant\r\n      description\r\n      customInputs {\r\n        key\r\n        value\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\nconst variables = {\r\n  customInputs: customInputs,\r\n  categoryId: categoryId,\r\n};\r\n\r\n\r\n    // GraphQL isteği gönder\r\n    const response = await fetch(Constants.API, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: variables,\r\n      }),\r\n\r\n    });\r\n\r\n    console.log(response);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    if (response.ok) {\r\n      return data.data.createProduct;\r\n    }\r\n    throw new Error(data.errors[0].message);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getProducts = async (token: string) => {\r\n  try {\r\n    const query = ` query {\r\n      products {\r\n        id\r\n        image\r\n        title\r\n        category {\r\n          id\r\n          name\r\n        }\r\n        price\r\n        stock\r\n        variant\r\n        description\r\n        customInputs {\r\n          key\r\n          value\r\n        }\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n    `;\r\n\r\n\r\n    const response = await fetch(Constants.API, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n\r\n      }),\r\n    });\r\n\r\n\r\n\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return data.data.products;\r\n    }\r\n    throw new Error(data.errors[0].message);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const removeProduct = async (id: number, token: string) => {\r\n  try {\r\n    console.log(id);\r\n    const query = `\r\n    mutation ($id: Int!) {\r\n      removeProduct(id: $id)\r\n    }\r\n    `;\r\n\r\n    const response = await fetch(Constants.API, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: {\r\n          id: id,\r\n        },\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    console.log(data);\r\n    if (response.ok) {\r\n      return data.data.removeProduct;\r\n    }\r\n    throw new Error(data.errors[0].message);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const updateProduct = async (productData: any, token: string) => {\r\n\r\n  if(productData.stock >= 100){\r\n    productData.variant = \"success\"\r\n  }\r\n  else if(productData.stock < 100){\r\n    productData.variant = \"warning\"\r\n  }\r\n  else if(productData.stock <= 1){\r\n    productData.variant = \"danger\"\r\n  }\r\n\r\n\r\n  try {\r\n    // GraphQL sorgusu\r\n    const query = `\r\n    mutation {\r\n      updateProduct(updateProductInput: {\r\n        id: ${productData.id},\r\n        title: \"${productData.title}\",\r\n        price: ${productData.price},\r\n        stock: ${productData.stock},\r\n        variant: \"${productData.variant}\",\r\n        description: \"${productData.description}\",\r\n      }) {\r\n        id\r\n        title\r\n        price\r\n        stock\r\n        variant\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n    `;\r\n\r\n    // GraphQL isteği gönder\r\n    const response = await fetch(Constants.API, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: {\r\n          input: productData,\r\n        },\r\n      }),\r\n\r\n    });\r\n\r\n    console.log(response);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    if (response.ok) {\r\n      return data.data.updateProduct;\r\n    }\r\n    throw new Error(data.errors[0].message);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const updateStock = async (id: number, stock: number, token: string) => {\r\n  try {\r\n    // GraphQL sorgusu\r\n    const query = `\r\n    mutation {\r\n      updateProduct(updateProductInput: {\r\n        id: ${id},\r\n        stock: ${stock},\r\n      }) {\r\n        id\r\n        title\r\n        price\r\n        stock\r\n        variant\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n    `;\r\n\r\n    // GraphQL isteği gönder\r\n    const response = await fetch(Constants.API, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: {\r\n          input: id,\r\n        },\r\n      }),\r\n\r\n    });\r\n\r\n    console.log(response);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    if (response.ok) {\r\n      return data.data.updateProduct;\r\n    }\r\n    throw new Error(data.errors[0].message);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["Constants","link","API","login","register","verify","usePageTitle","title","breadCrumbItems","path","label","active","useRedux","appSelector","dispatch","token","localStorage","getItem","useState","countProforma","setCountProforma","musteri","state","Musteriler","musteriler","console","log","currentDate","Date","day","getDate","monthIndex","getMonth","month","year","getFullYear","formattedDate","proformaNumber","setProformaNumber","customerInfo","setCustomerInfo","sepet","setSepet","customerId","parsedCustomerId","parseInt","useEffect","handleGetSepet","itemCount","length","handleGetCustomer","subTotal","reduce","total","item","quantity","products","price","prevNumber","handleSaveOrder","data","stateId","createdAt","toplamFiyat","createSiparis","res","updatedStock","stock","updateStock","id","getSepet","response","getCustomer","md","className","src","LogoDark","alt","height","firmName","address","phone","name","email","invoiceDetails","map","index","style","width","customInputs","input","key","value","toString","xl","xs","offset","span","to","onClick","e","window","print","pricingPlans","duration","features","isPopular","pricingPlans2","invoice_id","customer","notes","order_date","order_status","order_id","owner","line_1","city","zip","items","description","unit_cost","sub_total","discount","vat","createCustomer","customerData","query","avatar","fetch","method","headers","body","JSON","stringify","variables","json","result","ok","Error","errors","message","getCustomers","customers","deleteCustomer","updateCustomer","createSepet","sepetData","productId","Authorization","createCart","carts","updateCart","removeCart","siparisData","variant","siparis","Number","createOrder","getSiparisler","orders","updateSiparis","updateOrder","deleteSiparis","orderId","removeOrder","addProduct","productData","customFields","placeholder","categoryId","image","createProduct","getProducts","removeProduct","updateProduct","CardImg","React","ref","bsPrefix","as","Component","props","prefix","useBootstrapPrefix","_jsx","classNames","displayName","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","children","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","Card","bg","text","border","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","BsComponent","Tag","resolvedPrefix","p","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}